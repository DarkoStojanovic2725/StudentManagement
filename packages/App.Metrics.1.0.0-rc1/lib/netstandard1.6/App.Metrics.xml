<?xml version="1.0"?>
<doc>
    <assembly>
        <name>App.Metrics</name>
    </assembly>
    <members>
        <member name="T:App.Metrics.IMetrics">
            <summary>
                Gets the record application metrics.
            </summary>
            <remarks>
                This is the entry point to the application's metrics registry
            </remarks>
        </member>
        <member name="T:App.Metrics.MetricType">
            <summary>
                Available metric types
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Gauge">
            <summary>
                A <see href="https://alHardy.github.io/app-metrics-docs/getting-started/metric-types/gauges.html">Gauge</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Counter">
            <summary>
                A <see href="https://alHardy.github.io/app-metrics-docs/getting-started/metric-types/counters.html">Counter</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Meter">
            <summary>
                A <see href="https://alHardy.github.io/app-metrics-docs/getting-started/metric-types/meters.html">Meter</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Histogram">
            <summary>
                A
                <see href="https://alHardy.github.io/app-metrics-docs/getting-started/metric-types/histograms.html">Histogram</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Timer">
            <summary>
                A <see href="https://alHardy.github.io/app-metrics-docs/getting-started/metric-types/timers.html">Timer</see>
                Metric
            </summary>
        </member>
        <member name="F:App.Metrics.MetricType.Apdex">
            <summary>
                An <see href="https://alHardy.github.io/app-metrics-docs/getting-started/metric-types/apdex.html">Apdex</see>
                Metric
            </summary>
        </member>
        <member name="T:App.Metrics.TimeUnit">
            <summary>
                The time unit used for a measurement
            </summary>
        </member>
        <member name="P:App.Metrics.Abstractions.Filtering.IFilterMetrics.ReportEnvironment">
            <summary>
                Gets a value indicating whether [report environment].
            </summary>
            <remarks>
                If <c>false</c> when metrics data is retrieved the environment information will not be populated
            </remarks>
            <value>
                <c>true</c> if [report environment]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.Filtering.IFilterMetrics.ReportHealthChecks">
            <summary>
                Gets a value indicating whether [report health checks].
            </summary>
            <remarks>
                If <c>false</c> when metrics data is retrieved the health information will not be populated
            </remarks>
            <value>
                <c>true</c> if [report health checks]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.IsApdexMatch(App.Metrics.Apdex.ApdexValueSource)">
            <summary>
                Determines whether the specified apdex is match.
            </summary>
            <param name="apdex">The apdex.</param>
            <returns>True if the metric type is an apdex, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.IsCounterMatch(App.Metrics.Counter.CounterValueSource)">
            <summary>
                Determines whether the specified counter is match.
            </summary>
            <param name="counter">The counter.</param>
            <returns>True if the metric type is a counter, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.IsGaugeMatch(App.Metrics.Gauge.GaugeValueSource)">
            <summary>
                Determines whether the specified gauge is match.
            </summary>
            <param name="gauge">The gauge.</param>
            <returns>True if the metric type is a gauge, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.IsHistogramMatch(App.Metrics.Histogram.HistogramValueSource)">
            <summary>
                Determines whether the specified histogram is match.
            </summary>
            <param name="histogram">The histogram.</param>
            <returns>True if the metric type is a histogram, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.IsContextMatch(System.String)">
            <summary>
                Determines whether the specified context is match.
            </summary>
            <param name="context">The context.</param>
            <returns>true if the context matches</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.IsMeterMatch(App.Metrics.Meter.MeterValueSource)">
            <summary>
                Determines whether the specified meter is match.
            </summary>
            <param name="meter">The meter.</param>
            <returns>True if the metric type is a meter, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.IsTimerMatch(App.Metrics.Timer.TimerValueSource)">
            <summary>
                Determines whether the specified timer is match.
            </summary>
            <param name="timer">The timer.</param>
            <returns>True if the metric type is a timer, the name matches and tags match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.WhereContext(System.Predicate{System.String})">
            <summary>
                Filters metrics where the specified predicate on the metrics context is <c>true</c>
            </summary>
            <param name="condition">The predicate on the context to filter on.</param>
            <returns>A filter where the metric context should match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.WhereContext(System.String)">
            <summary>
                Filters metrics where the specified context matches
            </summary>
            <param name="context">The metrics context to filter on.</param>
            <returns>A filter where the metric context should match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.WhereMetricName(System.Predicate{System.String})">
            <summary>
                Filters metrics where the specified predicate on the metric name is <c>true</c>
            </summary>
            <param name="condition">The predicate on the metric name to filter on.</param>
            <returns>A filter where the metric name should match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.WhereMetricNameStartsWith(System.String)">
            <summary>
                Filters metrics where the metric name starts with the specified name
            </summary>
            <param name="name">The metrics name to filter on.</param>
            <returns>A filter where the metric name starts with the specified name</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.WhereMetricTaggedWithKey(System.String[])">
            <summary>
                Filters metrics where the metrics contain the specified tags keys
            </summary>
            <param name="tagKeys">The metrics tag keys to filter on.</param>
            <returns>A filter where the metric tags keys should match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.WhereMetricTaggedWithKeyValue(App.Metrics.Filtering.TagKeyValueFilter)">
            <summary>
                Filters metrics where the metrics contain the specified tags key/value pair
            </summary>
            <param name="tags">The metrics tag key/values to filter on.</param>
            <returns>A filter where the metric tags key and value should match</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.Filtering.IFilterMetrics.WhereType(App.Metrics.MetricType[])">
            <summary>
                Fitlers metrics by matching types
            </summary>
            <param name="types">The metric types to filter on.</param>
            <returns>A filter where metrics types should match</returns>
        </member>
        <member name="T:App.Metrics.Abstractions.Metrics.IApdexMetric">
            <summary>
                Provides access to a adpex metric implementation e.g. <see cref="T:App.Metrics.Apdex.DefaultApdexMetric" />
                <seealso>
                    <cref>App.Metrics.Core.Interfaces.IApdex</cref>
                </seealso>
                <seealso>
                    <cref>App.Metrics.Data.Interfaces.IMetricValueProvider{ApdexValue}</cref>
                </seealso>
                <seealso>
                    <cref>System.IDisposable</cref>
                </seealso>
            </summary>
        </member>
        <member name="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric">
            <summary>
                Provides access to a counter metric implementation e.g. <see cref="T:App.Metrics.Counter.DefaultCounterMetric" />, allows custom counters
                to be
                implemented
            </summary>
            <seealso cref="T:App.Metrics.Counter.Abstractions.ICounter" />
            <seealso cref="T:App.Metrics.Core.Abstractions.IMetricValueProvider`1" />
        </member>
        <member name="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric">
            <summary>
                Provides access to a gauge metric implementation e.g. <see cref="T:App.Metrics.Gauge.FunctionGauge" />, <see cref="T:App.Metrics.Gauge.HitRatioGauge" />,
                <see cref="T:App.Metrics.Gauge.DerivedGauge" />, <see cref="T:App.Metrics.Gauge.HitPercentageGauge" />, <see cref="T:App.Metrics.Gauge.PercentageGauge" />.
                Allows custom gauges to be implemented
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />
        </member>
        <member name="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric">
            <summary>
                Provides access to a histgram metric implementation e.g. <see cref="T:App.Metrics.Histogram.DefaultHistogramMetric" />, allows custom
                histograms to be implemented
            </summary>
            <seealso cref="T:App.Metrics.Histogram.Abstractions.IHistogram" />
            <seealso cref="T:App.Metrics.Core.Abstractions.IMetricValueProvider`1" />
        </member>
        <member name="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric">
            <summary>
                Provides access to a meter metric implementation e.g. <see cref="T:App.Metrics.Meter.DefaultMeterMetric" />, allows custom meters to be
                implemented
            </summary>
            <seealso cref="T:App.Metrics.Meter.Abstractions.IMeter" />
            <seealso cref="T:App.Metrics.Core.Abstractions.IMetricValueProvider`1" />
        </member>
        <member name="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric">
            <summary>
                Provides access to a timer metric implementation e.g. <see cref="T:App.Metrics.Timer.DefaultTimerMetric" />, allows custom timers to be
                implemented
            </summary>
            <seealso cref="T:App.Metrics.Core.Abstractions.IMetricValueProvider`1" />
        </member>
        <member name="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir">
            <summary>
                Provides access to a Resevoir Sampling implementation. Reservoir sampling is a family of randomized algorithms for
                randomly choosing a sample of k items from a list S containing n items, where n is either a very large or unknown
                number. Typically n is large enough that the list doesn't fit into main memory.
            </summary>
        </member>
        <member name="M:App.Metrics.Abstractions.ReservoirSampling.IReservoir.GetSnapshot(System.Boolean)">
            <summary>
                Gets a statistical <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot">snapshot</see> including
                <see href="https://en.wikipedia.org/wiki/Percentile">percentiles</see> of the current sample.
            </summary>
            <param name="resetReservoir">if set to <c>true</c> [reset reservoir].</param>
            <returns>A <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot">snapshot</see> of the current sample</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.ReservoirSampling.IReservoir.GetSnapshot">
            <summary>
                Gets a statistical <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot">snapshot</see> including
                <see href="https://en.wikipedia.org/wiki/Percentile">percentiles</see> of the current sample.
            </summary>
            <returns>A <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot">snapshot</see> of the current sample</returns>
        </member>
        <member name="M:App.Metrics.Abstractions.ReservoirSampling.IReservoir.Reset">
            <summary>
                Reset all statistics, in addition to the underlying reservoir.
            </summary>
        </member>
        <member name="M:App.Metrics.Abstractions.ReservoirSampling.IReservoir.Update(System.Int64,System.String)">
            <summary>
                Update statistics and the reservoir with a new sample.
            </summary>
            <param name="value">The value.</param>
            <param name="userValue">The user value.</param>
        </member>
        <member name="M:App.Metrics.Abstractions.ReservoirSampling.IReservoir.Update(System.Int64)">
            <summary>
                Update statistics and the reservoir with a new sample.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot">
            <summary>
                Provides access to a snapshot used for calculating
                <see href="https://en.wikipedia.org/wiki/Quantile">quantile</see> statistics.
            </summary>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Count">
            <summary>
                Gets the number of samples that the histogram has been updated with.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Max">
            <summary>
                Gets the maximum value of all samples
            </summary>
            <value>
                The maximum.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.MaxUserValue">
            <summary>
                Gets the maximum value which was recorded in the samples set
            </summary>
            <value>
                The maximum user value.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Mean">
            <summary>
                Gets the average of all samples since the histogram was created.
            </summary>
            <value>
                The mean.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Median">
            <summary>
                Gets the median value of all samples
            </summary>
            <value>
                The median.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Min">
            <summary>
                Gets the minimum value of all samples.
            </summary>
            <value>
                The minimum.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.MinUserValue">
            <summary>
                Gets the minumum value which was recorded in the samples set
            </summary>
            <value>
                The minimum user value.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Percentile75">
            <summary>
                Gets the 75th percentile of all samples
            </summary>
            <value>
                The percentile75.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Percentile95">
            <summary>
                Gets the 95th percentile of all samples
            </summary>
            <value>
                The percentile95.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Percentile98">
            <summary>
                Gets the 98th percentile of all samples
            </summary>
            <value>
                The percentile98.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Percentile99">
            <summary>
                Gets the 99th percentile of all samples
            </summary>
            <value>
                The percentile99.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Percentile999">
            <summary>
                Gets the 99.9th percentile of all samples
            </summary>
            <value>
                The percentile999.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Size">
            <summary>
                Gets the current size of the histogram's reservoir
            </summary>
            <value>
                The size.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.StdDev">
            <summary>
                Gets the standard deviation of all samples.
            </summary>
            <value>
                The standard dev.
            </value>
        </member>
        <member name="P:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.Values">
            <summary>
                Gets the samples of the snapshot
            </summary>
            <value>
                The values.
            </value>
        </member>
        <member name="M:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot.GetValue(System.Double)">
            <summary>
                Calculate an arbitrary quantile value for the snapshot. Values below zero or greater than one will be clamped to
                the range [0, 1]
            </summary>
            <param name="quantile">The quantile.</param>
            <returns>The quantile value</returns>
        </member>
        <member name="P:App.Metrics.Apdex.ApdexContext.Elapsed">
            <summary>
                Gets the currently elapsed time from when the instance has been created
            </summary>
            <value>
                The elapsed.
            </value>
        </member>
        <member name="T:App.Metrics.Apdex.ApdexProvider">
            <summary>
                The default <see cref="T:App.Metrics.Apdex.Abstractions.IApdexProvider">IApdexProvider</see> implementation which uses the specified
                <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir">reservoir</see> to sample values in order to caclulate an apdex score
            </summary>
            <seealso>
                <cref>App.Metrics.Apdex.Interfaces.IApdexProvider</cref>
            </seealso>
        </member>
        <member name="M:App.Metrics.Apdex.ApdexProvider.#ctor(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Apdex.ApdexProvider" /> class.
            </summary>
            <remarks>
                The apdex T <see cref="T:App.Metrics.Core.Internal.Constants.ReservoirSampling">default</see> value will be used
            </remarks>
            <param name="reservoir">The reservoir used to sample values in order to caclulate an apdex score.</param>
        </member>
        <member name="M:App.Metrics.Apdex.ApdexProvider.#ctor(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir},System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Apdex.ApdexProvider" /> class.
            </summary>
            <param name="reservoir">The reservoir used to sample values in order to caclulate an apdex score.</param>
            <param name="apdexTSeconds">The apdex t seconds used to calculate satisfied, tolerating and frustrating counts.</param>
        </member>
        <member name="M:App.Metrics.Apdex.ApdexProvider.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:App.Metrics.Apdex.ApdexSnapshot.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.ApdexSnapshot.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Apdex.ApdexValue">
            <summary>
                The value reported by an Apdex Metric
            </summary>
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexBuilder.Build(System.Double,System.Boolean,App.Metrics.IClock)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexBuilder.Build(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir},System.Double,System.Boolean,App.Metrics.IClock)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexManager.#ctor(App.Metrics.Apdex.Abstractions.IBuildApdexMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Apdex.DefaultApdexManager" /> class.
            </summary>
            <param name="apdexBuilder">The apdex builder.</param>
            <param name="registry">The registry storing all metric data.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexManager.Track(App.Metrics.Core.Options.ApdexOptions,System.Action)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexManager.Track(App.Metrics.Core.Options.ApdexOptions)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Apdex.DefaultApdexMetric">
            <summary>
                <see href="https://en.wikipedia.org/wiki/Apdex">Apdex</see> Metric allows us to measure an apdex score which is a
                ratio of the number of satisfied and tolerating requests to the total requests made. Each satisfied request counts
                as one request, while each tolerating request counts as half a satisfied request.
            </summary>
            <seealso>
                <cref>App.Metrics.Facts.Metrics.IApdexMetric</cref>
            </seealso>
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.#ctor(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir},System.Double,App.Metrics.IClock,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Apdex.DefaultApdexMetric" /> class.
            </summary>
            <param name="reservoir">The reservoir to user for sampling.</param>
            <param name="apdexTSeconds">The apdex t seconds value between 0 and 1.</param>
            <param name="clock">The clock to use to measure processing duration.</param>
            <param name="allowWarmup">
                if set to <c>true</c> allows the service to warmup before starting to calculate the apdex,
                the score will intitially be 1 until enough samples have been recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.#ctor(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir},App.Metrics.IClock,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Apdex.DefaultApdexMetric" /> class.
            </summary>
            <param name="reservoir">The reservoir to user for sampling.</param>
            <param name="clock">The clock to use to measure processing duration.</param>
            <param name="allowWarmup">
                if set to <c>true</c> allows the service to warmup before starting to calculate the apdex,
                the score will intitially be 1 until enough samples have been recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.#ctor(App.Metrics.Apdex.Abstractions.IApdexProvider,App.Metrics.IClock,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Apdex.DefaultApdexMetric" /> class.
            </summary>
            <param name="apdexProvider">The apdexProvider implementation to use for sampling values to generate the apdex score.</param>
            <param name="clock">The clock to use to measure processing duration.</param>
            <param name="allowWarmup">
                if set to <c>true</c> allows the service to warmup before starting to calculate the apdex,
                the score will intitially be 1 until enough samples have been recorded.
            </param>
            <exception cref="T:System.ArgumentNullException">
                clock and apdexProvider are required.
            </exception>
        </member>
        <member name="P:App.Metrics.Apdex.DefaultApdexMetric.Value">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.CurrentTime">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.EndRecording">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.GetValue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.NewContext">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.Reset">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.StartRecording">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.Track(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetric.Track(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetricProvider.Instance(App.Metrics.Core.Options.ApdexOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Apdex.DefaultApdexMetricProvider.Instance``1(App.Metrics.Core.Options.ApdexOptions,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Apdex.Abstractions.IApdex">
            <summary>
                <see href="https://en.wikipedia.org/wiki/Apdex">Apdex</see> allows us to measure an apdex score which is a ratio of
                the number of satisfied and tolerating requests to the total requests made. Each satisfied request counts as one
                request, while each tolerating request counts as half a satisfied request.
                <para>
                    Apdex tracks three response counts, counts based on samples measured by the chosen
                    <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir">reservoir</see>.
                </para>
                <para>
                    Satisfied, Tolerated and Frustrated request counts are calculated as follows using a user value of T seconds.
                </para>
                <list type="bullet">
                    <item>
                        <description>
                            Satisfied: T or less
                        </description>
                    </item>
                    <item>
                        <description>
                            Tolerated: Greater than T or less than 4T
                        </description>
                    </item>
                    <item>
                        <description>
                            Frustrated: Greater than 4 T
                        </description>
                    </item>
                </list>
            </summary>
            <seealso>
                <cref>App.Metrics.IResetableMetric</cref>
            </seealso>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdex.CurrentTime">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Returns the current time in nanoseconds for computing elapsed time.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdex.EndRecording">
            <summary>
                This is part of advanced timer API. Use Apdex.NewContext() by default.
                Manually ends timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdex.NewContext">
            <summary>
                Creates a new disposable instance and records the time it takes until the instance is disposed.
                <code>
            using(apdex.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdex.StartRecording">
            <summary>
                This is part of advanced apdex API. Use Apdex.NewContext() by default.
                Manually start timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdex.Track(System.Int64)">
            <summary>
                This is part of advanced apdex API. Use Apdex.NewContext() by default.
                Manually record timer value use to calculate the apdex score.
            </summary>
            <param name="duration">The value representing the manually measured time.</param>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdex.Track(System.Action)">
            <summary>
                Runs the <paramref name="action" /> and records the time it took allowing us to calculate an apdex score.
            </summary>
            <param name="action">Action to run and record time for.</param>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdex.Track``1(System.Func{``0})">
            <summary>
                Runs the <paramref name="action" /> returning the result and records the time it took allowing us to calculate an
                apdex score.
            </summary>
            <typeparam name="T">Type of the value returned by the action</typeparam>
            <param name="action">Action to run and record time for.</param>
            <returns>The result of the <paramref name="action" /></returns>
        </member>
        <member name="T:App.Metrics.Apdex.Abstractions.IApdexProvider">
            <summary>
                Provides access to an ApdexProvider Implementation responsible for sampling measured duration to calcualte an apdex
                score
            </summary>
            <seealso cref="T:System.IDisposable" />
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdexProvider.GetSnapshot(System.Boolean)">
            <summary>
                Gets a <see cref="T:App.Metrics.Apdex.ApdexSnapshot">snapshot</see> including the number of satisfied, tolerating, frustrating
                requests, the apdex score and the number of samples used to calculate the result.
            </summary>
            <param name="resetReservoir">if set to <c>true</c> [reset reservoir].</param>
            <returns>The apdex snapshot</returns>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdexProvider.Reset">
            <summary>
                Reset all values, in addition to the underlying reservoir.
            </summary>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IApdexProvider.Update(System.Int64)">
            <summary>
                Update the chosen <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir">reservoir</see> with a new sample.
            </summary>
            <param name="value">The value.</param>
        </member>
        <member name="T:App.Metrics.Apdex.Abstractions.IMeasureApdexMetrics">
            <summary>
                Provides access to the API allowing Apdex Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IMeasureApdexMetrics.Track(App.Metrics.Core.Options.ApdexOptions,System.Action)">
            <summary>
                Records a <see cref="T:App.Metrics.Abstractions.Metrics.IApdexMetric" /> which measures the time taken to process an action, samples data and procuded
                an apdex score.
            </summary>
            <param name="options">The settings of the apdex metric that is being measured</param>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:App.Metrics.Apdex.Abstractions.IMeasureApdexMetrics.Track(App.Metrics.Core.Options.ApdexOptions)">
            <summary>
                Records a <see cref="T:App.Metrics.Abstractions.Metrics.IApdexMetric" /> which measures the time taken to process an action, samples data and procuded
                an apdex score.
            </summary>
            <param name="options">The settings of the apdex metric that is being measured</param>
            <returns>A disposable context, when disposed records the time token to process the using block</returns>
        </member>
        <member name="T:App.Metrics.Configuration.AppMetricsOptions">
            <summary>
                Top level container for all configuration settings of AppMetrics
            </summary>
        </member>
        <member name="P:App.Metrics.Configuration.AppMetricsOptions.DefaultContextLabel">
            <summary>
                Gets or sets the default context label using for grouping metrics in contexts.
            </summary>
            <remarks>Defaults to "Application"</remarks>
            <value>
                The default context label used for grouping metrics within the <see cref="T:App.Metrics.Registry.Abstractions.IMetricsRegistry" />.
            </value>
        </member>
        <member name="P:App.Metrics.Configuration.AppMetricsOptions.GlobalTags">
            <summary>
                Gets or sets the global tags to apply on all metrics when reporting.
            </summary>
            <value>
                The global tags applied to on all metrics when reporting.
            </value>
        </member>
        <member name="P:App.Metrics.Configuration.AppMetricsOptions.MetricsEnabled">
            <summary>
                Gets or sets a value indicating whether [metrics enabled].
            </summary>
            <remarks>If disabled no metrics will be recorded or stored in memory</remarks>
            <value>
                <c>true</c> if [metrics enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Configuration.AppMetricsOptions.ReportingEnabled">
            <summary>
                Gets or sets a value indicating whether [reporting enabled].
            </summary>
            <value>
                <c>true</c> if [reporting enabled]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:App.Metrics.Core.Abstractions.IBuildMetrics">
            <summary>
                Provides access to APIs which build instances of all available metric types. Metrics created are not added to the
                <see cref="T:App.Metrics.Registry.Abstractions.IMetricsRegistry" />.
            </summary>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IBuildMetrics.Apdex">
            <summary>
                Gets the Apdex API to build <see cref="T:App.Metrics.Abstractions.Metrics.IApdexMetric" />s
            </summary>
            <value>
                The Apdex API for building <see cref="T:App.Metrics.Abstractions.Metrics.IApdexMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IBuildMetrics.Counter">
            <summary>
                Gets the Counter API to build <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" />s
            </summary>
            <value>
                The Counter API for building <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IBuildMetrics.Gauge">
            <summary>
                Gets the Gauge API to build <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />s
            </summary>
            <value>
                The Gauge API for building <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IBuildMetrics.Histogram">
            <summary>
                Gets the Histogram API to build <see cref="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric" />s
            </summary>
            <value>
                The Histogram API for building <see cref="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IBuildMetrics.Meter">
            <summary>
                Gets the Meter API to build <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" />s
            </summary>
            <value>
                The Meter API for building <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" />s
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IBuildMetrics.Timer">
            <summary>
                Gets the Timer API to build <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" />s
            </summary>
            <value>
                The Timer API for building <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" />s
            </value>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IManageMetrics.Disable">
            <summary>
                Disables all recording of metrics
            </summary>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IManageMetrics.Reset">
            <summary>
                Allows resetting of all metric data at runtime.
            </summary>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IManageMetrics.ShutdownContext(System.String)">
            <summary>
                Allows clearing all metrics belonging to the specified context at runtime.
            </summary>
            <param name="context">The context.</param>
        </member>
        <member name="T:App.Metrics.Core.Abstractions.IMeasureMetrics">
            <summary>
                Provides access to measure/record available metric types
            </summary>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IMeasureMetrics.Apdex">
            <summary>
                Gets the available Apdex API allowing Apdex metrics to be measured
            </summary>
            <value>
                The Apdex API for measuring Apdex metrics
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IMeasureMetrics.Counter">
            <summary>
                Gets the available Counter API allowing Counter metrics to be measured
            </summary>
            <value>
                The Counter API for measuring Counter metrics
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IMeasureMetrics.Gauge">
            <summary>
                Gets the available Gauge API allowing Gauge metrics to be measured
            </summary>
            <value>
                The Gauge API for measuring Gauge metrics
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IMeasureMetrics.Histogram">
            <summary>
                Gets the available Histogram API allowing Histogram metrics to be measured
            </summary>
            <value>
                The Histogram API for measuring Histogram metrics
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IMeasureMetrics.Meter">
            <summary>
                Gets the available Meter API allowing Meter metrics to be measured
            </summary>
            <value>
                The Meter API for measuring Meter metrics
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IMeasureMetrics.Timer">
            <summary>
                Gets the available Timer API allowing Timer metrics to be measured
            </summary>
            <value>
                The Timer API for measuring Timer metrics
            </value>
        </member>
        <member name="T:App.Metrics.Core.Abstractions.IMetricValueProvider`1">
            <summary>
                Indicates the ability to provide the value for a metric.
                This is the raw value. Consumers should use <see cref="T:App.Metrics.Core.Abstractions.MetricValueSourceBase`1" />
            </summary>
            <typeparam name="T">Type of the value returned by the metric</typeparam>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.IMetricValueProvider`1.Value">
            <summary>
                Gets the current value of the metric.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IMetricValueProvider`1.GetValue(System.Boolean)">
            <summary>
                Get the current value for the metric, but also reset the metric.
                Useful for pushing data to only one consumer (ex: graphite) where you might want to only capture values just
                between the report interval.
            </summary>
            <param name="resetMetric">if set to true the metric will be reset.</param>
            <returns>The current value for the metric.</returns>
        </member>
        <member name="T:App.Metrics.Core.Abstractions.IProvideMetricValues">
            <summary>
                Provides access to the current metrics recorded by the application
            </summary>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IProvideMetricValues.Get">
            <summary>
                Returns the current metrics data for all contexts.
            </summary>
            <returns>
                A snapshot of the current metrics data, if a global <see cref="T:App.Metrics.Abstractions.Filtering.IFilterMetrics" /> is configured this will be
                applied on the result.
            </returns>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IProvideMetricValues.Get(App.Metrics.Abstractions.Filtering.IFilterMetrics)">
            <summary>
                Returns the current metrics data for the context for which this provider has been created.
            </summary>
            <param name="overrideGlobalFilter">
                The override the configured global filter and filters metric data by the specified
                <see cref="T:App.Metrics.Abstractions.Filtering.IFilterMetrics" />.
            </param>
            <returns>
                A snapshot of the current metrics data filtered by the specified <see cref="T:App.Metrics.Abstractions.Filtering.IFilterMetrics" />
            </returns>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IProvideMetricValues.GetForContext(System.String)">
            <summary>
                Retrieves a snapshot of the current metrics values recorded.
            </summary>
            <param name="context">The metric context to retreive.</param>
            <returns>Metrics data belonging to the specified context</returns>
        </member>
        <member name="T:App.Metrics.Core.Abstractions.IResetableMetric">
            <summary>
                Indicates a metric's ability to be reset. Reseting a metric clear all currently collected data.
            </summary>
        </member>
        <member name="M:App.Metrics.Core.Abstractions.IResetableMetric.Reset">
            <summary>
                Clear all currently collected data for this metric.
            </summary>
        </member>
        <member name="T:App.Metrics.Core.Abstractions.MetricValueSourceBase`1">
            <summary>
                Provides the value of a metric and information about units.
                This is the class that metric consumers should use.
            </summary>
            <typeparam name="T">Type of the metric value</typeparam>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.MetricValueSourceBase`1.Group">
            <summary>
                Gets the Group of the metric within a context.
            </summary>
            <value>
                The group.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.MetricValueSourceBase`1.Name">
            <summary>
                Gets the Name of the metric.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.MetricValueSourceBase`1.Tags">
            <summary>
                Gets the Tags associated with the metric.
            </summary>
            <value>
                The tags.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.MetricValueSourceBase`1.Unit">
            <summary>
                Gets the Unit representing what the metric is measuring.
            </summary>
            <value>
                The unit.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.MetricValueSourceBase`1.Value">
            <summary>
                Gets the current value of the metric.
            </summary>
            <value>
                The value.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Abstractions.MetricValueSourceBase`1.ValueProvider">
            <summary>
                Gets the instance capable of returning the current value for the metric.
            </summary>
            <value>
                The value provider.
            </value>
        </member>
        <member name="T:App.Metrics.Core.Interfaces.IProvideMetrics">
            <summary>
                Provides access to APIs which get or add metrics to the <see cref="T:App.Metrics.Registry.Abstractions.IMetricsRegistry" /> and return the instance.
            </summary>
        </member>
        <member name="P:App.Metrics.Core.Interfaces.IProvideMetrics.Apdex">
            <summary>
                Gets the Apdex API to register and retrieve <see cref="T:App.Metrics.Abstractions.Metrics.IApdexMetric" />s to be measured.
            </summary>
            <value>
                The Apdex API for registering and retrieving <see cref="T:App.Metrics.Abstractions.Metrics.IApdexMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.Core.Interfaces.IProvideMetrics.Counter">
            <summary>
                Gets the Counter API to register and retrieve <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" />s to be measured.
            </summary>
            <value>
                The Counter API for registering and retrieving <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.Core.Interfaces.IProvideMetrics.Gauge">
            <summary>
                Gets the Gauge API to register and retrieve <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />s to be measured.
            </summary>
            <value>
                The Gauge API for registering and retrieving <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.Core.Interfaces.IProvideMetrics.Histogram">
            <summary>
                Gets the Histogram API to register and retrieve <see cref="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric" />s to be measured.
            </summary>
            <value>
                The Histogram API for registering and retrieving <see cref="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.Core.Interfaces.IProvideMetrics.Meter">
            <summary>
                Gets the Meter API to register and retrieve <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" />s to be measured.
            </summary>
            <value>
                The Meter API for registering and retrieving <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" />s to be measured
            </value>
        </member>
        <member name="P:App.Metrics.Core.Interfaces.IProvideMetrics.Timer">
            <summary>
                Gets the Timer API to register and retrieve <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" />s to be measured.
            </summary>
            <value>
                The Timer API for registering and retrieving <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" />s to be measured
            </value>
        </member>
        <member name="T:App.Metrics.Core.Interfaces.IHideObjectMembers">
            <summary>
                Marker interface to cleanup editor visible members.
            </summary>
            <remarks>Created by Daniel Cazzulino http://www.clariusconsulting.net/blogs/kzu/archive/2008/03/10/58301.aspx</remarks>
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider.#ctor(App.Metrics.Registry.Abstractions.IMetricsRegistry,App.Metrics.Core.Abstractions.IBuildMetrics,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider" /> class.
            </summary>
            <param name="registry">The metrics registry.</param>
            <param name="buideFactory">The buide factory.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider.Apdex">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider.Counter">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider.Gauge">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider.Histogram">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider.Meter">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMeasureMetricsProvider.Timer">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Core.Internal.DefaultMetrics">
            <summary>
                Provides access to record application metrics.
            </summary>
            <remarks>
                This is the entry point to the application's metrics registry
            </remarks>
            <seealso cref="T:App.Metrics.IMetrics" />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetrics.#ctor(App.Metrics.IClock,App.Metrics.Abstractions.Filtering.IFilterMetrics,App.Metrics.Core.Abstractions.IMeasureMetrics,App.Metrics.Core.Abstractions.IBuildMetrics,App.Metrics.Core.Interfaces.IProvideMetrics,App.Metrics.Core.Abstractions.IProvideMetricValues,App.Metrics.Core.Abstractions.IManageMetrics,App.Metrics.Health.Abstractions.IProvideHealth)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Core.Internal.DefaultMetrics" /> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="globalFilter">The global filter.</param>
            <param name="measureMetricsProvider">The factory used to provide access to metric managers.</param>
            <param name="metricsBuilder">The factory used to provide access to metric builders.</param>
            <param name="metricsProvider">The metrics advanced manager factory.</param>
            <param name="dataManager">The data manager.</param>
            <param name="metricsManager">The metrics manager.</param>
            <param name="healthProvider">The health status provider.</param>
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.Build">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.Clock">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.GlobalFilter">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.Health">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.Manage">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.Measure">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.Provider">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetrics.Snapshot">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsBuilderFactory.Apdex">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsBuilderFactory.Counter">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsBuilderFactory.Gauge">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsBuilderFactory.Histogram">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsBuilderFactory.Meter">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsBuilderFactory.Timer">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricsManager.#ctor(App.Metrics.Registry.Abstractions.IMetricsRegistry,Microsoft.Extensions.Logging.ILogger{App.Metrics.Core.Internal.DefaultMetricsManager})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Core.Internal.DefaultMetricsManager" /> class.
            </summary>
            <param name="registry">The registry.</param>
            <param name="logger">The logger.</param>
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricsManager.Disable">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricsManager.Reset">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricsManager.ShutdownContext(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricsProvider.#ctor(App.Metrics.Registry.Abstractions.IMetricsRegistry,App.Metrics.Core.Abstractions.IBuildMetrics,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Core.Internal.DefaultMetricsProvider" /> class.
            </summary>
            <param name="registry">The metrics registry.</param>
            <param name="buideFactory">The buide factory.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsProvider.Apdex">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsProvider.Counter">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsProvider.Gauge">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsProvider.Histogram">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsProvider.Meter">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Core.Internal.DefaultMetricsProvider.Timer">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricValuesProvider.#ctor(App.Metrics.Abstractions.Filtering.IFilterMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Core.Internal.DefaultMetricValuesProvider" /> class.
            </summary>
            <param name="globalFilter">The global filter.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricValuesProvider.Get">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricValuesProvider.Get(App.Metrics.Abstractions.Filtering.IFilterMetrics)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Core.Internal.DefaultMetricValuesProvider.GetForContext(System.String)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Core.Options.ApdexOptions">
            <summary>
                <see href="https://en.wikipedia.org/wiki/Apdex">Apdex</see> allows us to measure an apdex score which is a ratio of
                the number of satisfied and tolerating requests to the total requests made. Each satisfied request counts as one
                request, while each tolerating request counts as half a satisfied request.
                <para>
                    Apdex tracks three response counts, counts based on samples measured by the chosen
                    <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir">reservoir</see>, defaults to a <see cref="T:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir" />.
                </para>
            </summary>
            <seealso cref="T:App.Metrics.Core.Options.MetricValueWithSamplingOption" />
        </member>
        <member name="P:App.Metrics.Core.Options.ApdexOptions.AllowWarmup">
            <summary>
                Gets or sets a value indicating whether to allow the app to warmup before calcaulting.
                If set to <c>true</c> allows the service to warmup before starting to calculate the apdex,
                the score will intitially be 1 until enough samples have been recorded.
            </summary>
            <value>
                <c>true</c> if [allow warmup]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.ApdexOptions.ApdexTSeconds">
            <summary>
                Gets or sets the apdex t seconds.
                <para>
                    Satisfied, Tolerated and Frustrated request counts are calculated as follows using a user value of T seconds.
                </para>
                <list type="bullet">
                    <item>
                        <description>
                            Satisfied: T or less
                        </description>
                    </item>
                    <item>
                        <description>
                            Tolerated: Greater than T or less than 4T
                        </description>
                    </item>
                    <item>
                        <description>
                            Frustrated: Greater than 4 T
                        </description>
                    </item>
                </list>
            </summary>
            <value>
                The apdex T seconds used in calculating the score on the samples collected.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.ApdexOptions.ResetOnReporting">
            <summary>
                Gets or sets a value indicating whether the counts and score should be reset when it is reported, otherwise values
                are cummulative. Note: If using more than one reporter, the count will be reset for the first reporter which sends
                the value. Defaults to <c>false</c>.
            </summary>
            <value>
                <c>true</c> if [reset on reporting]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:App.Metrics.Core.Options.CounterOptions">
            <summary>
                Configuration of a <see cref="T:App.Metrics.Counter.Abstractions.ICounter" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.Core.Options.MetricValueOptionsBase" />
        </member>
        <member name="P:App.Metrics.Core.Options.CounterOptions.ReportItemPercentages">
            <summary>
                Gets or sets a value indicating whether the counter's set items should be reported. Defaults to <c>true</c>.
            </summary>
            <value>
                <c>true</c> if [report item percentages]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.CounterOptions.ReportSetItems">
            <summary>
                Gets or sets a value indicating whether or not to report the counter's set items. Defaults to <c>true</c>.
            </summary>
            <value>
                <c>true</c> if [report set items]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.CounterOptions.ResetOnReporting">
            <summary>
                Gets or sets a value indicating whether the counter should be reset when it is reported, otherwise counts are
                cummulative. Note: If using more than one reporter, the count will be reset for the first reporter which sends
                the value. Defaults to <c>false</c>.
            </summary>
            <value>
                <c>true</c> if [reset on reporting]; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:App.Metrics.Core.Options.GaugeOptions">
            <summary>
                Configuration of an <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.Core.Options.MetricValueOptionsBase" />
        </member>
        <member name="T:App.Metrics.Core.Options.HistogramOptions">
            <summary>
                Configuration of an <see cref="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.Core.Options.MetricValueWithSamplingOption" />
        </member>
        <member name="T:App.Metrics.Core.Options.MeterOptions">
            <summary>
                Configuration of an <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" /> that will be measured
            </summary>
            <seealso cref="T:App.Metrics.Core.Options.MetricValueOptionsBase" />
        </member>
        <member name="M:App.Metrics.Core.Options.MeterOptions.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Core.Options.MeterOptions" /> class.
            </summary>
        </member>
        <member name="P:App.Metrics.Core.Options.MeterOptions.RateUnit">
            <summary>
                Gets or sets the rate unit used for visualization which defaults to Minutes
            </summary>
            <value>
                The rate unit.
            </value>
        </member>
        <member name="T:App.Metrics.Core.Options.MetricValueOptionsBase">
            <summary>
                Configuration of a Metric that will be measured
            </summary>
        </member>
        <member name="P:App.Metrics.Core.Options.MetricValueOptionsBase.Context">
            <summary>
                Gets or sets the context for which the metric belongs e.g. Application.WebRequests
            </summary>
            <value>
                The context.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.MetricValueOptionsBase.Group">
            <summary>
                Gets or sets the group of the Metric being measured
            </summary>
            <value>
                The group.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.MetricValueOptionsBase.MeasurementUnit">
            <summary>
                Gets or sets the description of what is being measured, a <see cref="T:App.Metrics.Unit" /> is something that is expressed in MB,
                kB for example
            </summary>
            <value>
                The measurement unit.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.MetricValueOptionsBase.Name">
            <summary>
                Gets or sets the name of the Metric being measure, this should be unique per <see cref="T:App.Metrics.MetricType" />
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.MetricValueOptionsBase.Tags">
            <summary>
                Gets or sets the <see cref="T:App.Metrics.Tagging.MetricTags" /> associated with the metric, this is useful for grouping metrics when
                visualizing
            </summary>
            <value>
                The tags.
            </value>
        </member>
        <member name="T:App.Metrics.Core.Options.MetricValueWithSamplingOption">
            <summary>
                Configuration of a Metric that will be measured using a reservoir sampling type
            </summary>
        </member>
        <member name="P:App.Metrics.Core.Options.MetricValueWithSamplingOption.Reservoir">
            <summary>
                Gets or sets an <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" /> implementation for sampling.
            </summary>
            <value>
                The reservoir instance to use for sampling.
            </value>
            <remarks>
                Reservoir sampling avoids unbound memory usage, allows metrics to be generated from a reservoir of values.
            </remarks>
        </member>
        <member name="P:App.Metrics.Core.Options.TimerOptions.DurationUnit">
            <summary>
                Gets or sets the duration unit used for visualization which defaults to Milliseconds
            </summary>
            <value>
                The duration unit.
            </value>
        </member>
        <member name="P:App.Metrics.Core.Options.TimerOptions.RateUnit">
            <summary>
                Gets or sets the rate unit used for visualization which defaults to Minutes
            </summary>
            <value>
                The rate unit.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.Count">
            <summary>
                Gets the total count of the counter instance.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.Items">
            <summary>
                Gets counters for each registered set item.
            </summary>
            <value>
                The counter's set items.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.SetItem.Count">
            <summary>
                Gets the specific count for this item.
            </summary>
            <value>
                The count.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.SetItem.Item">
            <summary>
                Gets the registered item name.
            </summary>
            <value>
                The item.
            </value>
        </member>
        <member name="P:App.Metrics.Counter.CounterValue.SetItem.Percent">
            <summary>
                Gets the percent of this item from the total count.
            </summary>
            <value>
                The percent.
            </value>
        </member>
        <member name="T:App.Metrics.Counter.CounterValueSource">
            <summary>
                Combines the value for a counter with the defined unit for the value.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.CounterValueSource.#ctor(System.String,App.Metrics.Core.Abstractions.IMetricValueProvider{App.Metrics.Counter.CounterValue},App.Metrics.Unit,App.Metrics.Tagging.MetricTags,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Counter.CounterValueSource" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <param name="tags">The tags.</param>
            <param name="resetOnReporting">if set to <c>true</c> [reset on reporting]. Defaults to <c>false</c>.</param>
            <param name="reportItemPercentages">if set to <c>true</c> [report item percentages]. Defaults to <c>true</c></param>
            <param name="reportSetItems">if set to <c>true</c> [report set items]. Defaults to <c>true</c></param>
        </member>
        <member name="M:App.Metrics.Counter.CounterValueSource.#ctor(System.String,System.String,App.Metrics.Core.Abstractions.IMetricValueProvider{App.Metrics.Counter.CounterValue},App.Metrics.Unit,App.Metrics.Tagging.MetricTags,System.Boolean,System.Boolean,System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Counter.CounterValueSource" /> class.
            </summary>
            <param name="name">The name.</param>
            <param name="group">The group.</param>
            <param name="value">The value.</param>
            <param name="unit">The unit.</param>
            <param name="tags">The tags.</param>
            <param name="resetOnReporting">if set to <c>true</c> [reset on reporting]. Defaults to <c>false</c>.</param>
            <param name="reportItemPercentages">if set to <c>true</c> [report item percentages]. Defaults to <c>true</c></param>
            <param name="reportSetItems">if set to <c>true</c> [report set items]. Defaults to <c>true</c></param>
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterBuilder.Build">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterBuilder.Build``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.#ctor(App.Metrics.Counter.Abstractions.IBuildCounterMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Counter.DefaultCounterManager" /> class.
            </summary>
            <param name="counterBuilder">The counter builder.</param>
            <param name="registry">The registry storing all metric data.</param>
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Decrement(App.Metrics.Core.Options.CounterOptions,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Decrement(App.Metrics.Core.Options.CounterOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Decrement(App.Metrics.Core.Options.CounterOptions,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Decrement(App.Metrics.Core.Options.CounterOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Decrement(App.Metrics.Core.Options.CounterOptions,App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Decrement(App.Metrics.Core.Options.CounterOptions,System.Int64,App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Increment(App.Metrics.Core.Options.CounterOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Increment(App.Metrics.Core.Options.CounterOptions,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Increment(App.Metrics.Core.Options.CounterOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Increment(App.Metrics.Core.Options.CounterOptions,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Increment(App.Metrics.Core.Options.CounterOptions,App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterManager.Increment(App.Metrics.Core.Options.CounterOptions,System.Int64,App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Decrement">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Decrement(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Decrement(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Decrement(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Decrement(App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Decrement(App.Metrics.Tagging.MetricSetItem,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.GetValue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Increment">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Increment(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Increment(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Increment(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Increment(App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Increment(App.Metrics.Tagging.MetricSetItem,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetric.Reset">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetricProvider.#ctor(App.Metrics.Counter.Abstractions.IBuildCounterMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Counter.DefaultCounterMetricProvider" /> class.
            </summary>
            <param name="counterBuilder">The counter builder.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetricProvider.Instance``1(App.Metrics.Core.Options.CounterOptions,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Counter.DefaultCounterMetricProvider.Instance(App.Metrics.Core.Options.CounterOptions)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Counter.Abstractions.ICounter">
            <summary>
                A counter is a simple incrementing and decrementing 64-bit integer.
                Each operation can also be applied to a item from a set and the counter will store individual count for each set
                item.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.ICounter.Decrement(System.String)">
            <summary>
                Decrement the counter value for an item from a set. The counter value is decremented but the counter will also keep
                track and decrement another counter associated with the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.ICounter.Decrement(System.Int64)">
            <summary>
                Decrement the counter value with a specified amount.
            </summary>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.ICounter.Decrement(System.String,System.Int64)">
            <summary>
                Decrement the counter value with a specified amount for an item from a set.
                The counter value is decremented but the counter will also keep track and decrement another counter associated with
                the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.ICounter.Increment">
            <summary>
                Increment the counter value.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.ICounter.Increment(System.String)">
            <summary>
                Increment the counter value for an item from a set.
                The counter value is incremented but the counter will also keep track and increment another counter associated with
                the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.ICounter.Increment(System.Int64)">
            <summary>
                Increment the counter value with a specified amount.
            </summary>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.ICounter.Increment(System.String,System.Int64)">
            <summary>
                Increment the counter value with a specified amount for an item from a set.
                The counter value is incremented but the counter will also keep track and increment another counter associated with
                the <paramref name="setItem" />.
                The counter value will contain the total count and for each item the specific count and percentage of total count.
            </summary>
            <param name="setItem">Item from the set for which to increment the counter value.</param>
            <param name="amount">The amount with which to increment the counter.</param>
        </member>
        <member name="T:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics">
            <summary>
                Provides access to the API allowing Counter Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Decrement(App.Metrics.Core.Options.CounterOptions)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Decrement(App.Metrics.Core.Options.CounterOptions,System.Int64)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" /> by the specificed amount
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="amount">The amount to decrement the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Decrement(App.Metrics.Core.Options.CounterOptions,System.String)">
            <summary>
                Decrements the specified options.
            </summary>
            <param name="options">The options.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Decrement(App.Metrics.Core.Options.CounterOptions,System.Int64,System.String)">
            <summary>
                Decrements the specified options.
            </summary>
            <param name="options">The options.</param>
            <param name="amount">The amount.</param>
            <param name="item">The item.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Decrement(App.Metrics.Core.Options.CounterOptions,App.Metrics.Tagging.MetricSetItem)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is decremented as is the specified <see cref="T:App.Metrics.Tagging.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.Tagging.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="item">The item within the set to decrement.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Decrement(App.Metrics.Core.Options.CounterOptions,System.Int64,App.Metrics.Tagging.MetricSetItem)">
            <summary>
                Decrements a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" /> by the specified amount as well as the specified item within the
                counter's set
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="amount">The amount to decrement the counter.</param>
            <param name="item">The item within the set to decrement.</param>
            <remarks>
                The counter value is decremented as is the specified <see cref="T:App.Metrics.Tagging.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.Tagging.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Increment(App.Metrics.Core.Options.CounterOptions)">
            <summary>
                Increments a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Increment(App.Metrics.Core.Options.CounterOptions,System.Int64)">
            <summary>
                Increments a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" />
            </summary>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="amount">The amount to decrement the counter.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Increment(App.Metrics.Core.Options.CounterOptions,System.String)">
            <summary>
                Increments a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.Tagging.MetricTags" />'s counter within the set.
                The <see cref="T:App.Metrics.Tagging.MetricTags" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="item">The item within the set to increment.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Increment(App.Metrics.Core.Options.CounterOptions,System.Int64,System.String)">
            <summary>
                Increments a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.Tagging.MetricTags" />'s counter within the set.
                The <see cref="T:App.Metrics.Tagging.MetricTags" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="amount">The amount to increment the counter.</param>
            <param name="item">The item within the set to increment.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Increment(App.Metrics.Core.Options.CounterOptions,App.Metrics.Tagging.MetricSetItem)">
            <summary>
                Increment a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" /> as well as the specified item within the counter's set
            </summary>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.Tagging.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.Tagging.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
            <param name="options">The details of the counter that is being incremented</param>
            <param name="setItem">The item within the set to increment.</param>
        </member>
        <member name="M:App.Metrics.Counter.Abstractions.IMeasureCounterMetrics.Increment(App.Metrics.Core.Options.CounterOptions,System.Int64,App.Metrics.Tagging.MetricSetItem)">
            <summary>
                Increment a <see cref="T:App.Metrics.Abstractions.MetricTypes.ICounterMetric" /> by the specified amount as well as the specified item within the
                counter's set
            </summary>
            <param name="options">The details of the counter that is being decremented</param>
            <param name="amount">The amount to increment the counter.</param>
            <param name="setItem">The item within the set to increment.</param>
            <remarks>
                The counter value is incremented as is the specified <see cref="T:App.Metrics.Tagging.MetricSetItem" />'s counter within the set.
                The <see cref="T:App.Metrics.Tagging.MetricSetItem" /> within the set will also keep track of it's percentage from the total sets count.
            </remarks>
        </member>
        <member name="T:App.Metrics.DependencyInjection.Internal.AppMetricsReportingMarkerService">
            <summary>
                This is a Marker class which is used to determine if all the services were added
                to when App.Metrics.Reporting is loaded.
            </summary>
        </member>
        <member name="P:App.Metrics.DependencyInjection.Internal.DefaultHealthCheckTypeProvider.HealthCheckTypes">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.DependencyInjection.Internal.HealthCheckMarkerService">
            <summary>
                This is a Marker class which is used to determine if all the services were added
                to when App.Metrics is loaded.
            </summary>
        </member>
        <member name="M:App.Metrics.DependencyInjection.Internal.HealthServicesHelper.ThrowIfMetricsNotRegistered(System.IServiceProvider)">
            <summary>
                Throws InvalidOperationException when MetricsMarkerService is not present
                in the list of services.
            </summary>
            <param name="services">The list of services.</param>
        </member>
        <member name="T:App.Metrics.DependencyInjection.Internal.IMetricsAssemblyProvider">
            <summary>
                Specifies the contract for discovering assemblies that may contain App.Metrics specific types such as health
                checks.
            </summary>
        </member>
        <member name="P:App.Metrics.DependencyInjection.Internal.IMetricsAssemblyProvider.CandidateAssemblies">
            <summary>
                Gets the sequence of candidate <see cref="T:System.Reflection.Assembly" /> instances that the application
                uses for discovery of App.Metrics specific types.
            </summary>
            <value>
                The candidate assemblies.
            </value>
        </member>
        <member name="T:App.Metrics.DependencyInjection.Internal.MetricsMarkerService">
            <summary>
                This is a Marker class which is used to determine if all the services were added
                to when App.Metrics is loaded.
            </summary>
        </member>
        <member name="M:App.Metrics.DependencyInjection.Internal.MetricsServicesHelper.ThrowIfMetricsNotRegistered(System.IServiceProvider)">
            <summary>
                Throws InvalidOperationException when MetricsMarkerService is not present
                in the list of services.
            </summary>
            <param name="services">The list of services.</param>
        </member>
        <member name="M:App.Metrics.DependencyInjection.Internal.StaticHealthCheckTypeProvider.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.DependencyInjection.Internal.StaticHealthCheckTypeProvider" /> class.
            </summary>
        </member>
        <member name="M:App.Metrics.DependencyInjection.Internal.StaticHealthCheckTypeProvider.#ctor(System.Collections.Generic.IEnumerable{System.Reflection.TypeInfo})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.DependencyInjection.Internal.StaticHealthCheckTypeProvider" /> class.
            </summary>
            <param name="controllerTypes">The controller types.</param>
            <exception cref="T:System.ArgumentNullException">if controller types is null.</exception>
        </member>
        <member name="P:App.Metrics.DependencyInjection.Internal.StaticHealthCheckTypeProvider.HealthCheckTypes">
            <summary>
                Gets the list of controller <see cref="T:System.Reflection.TypeInfo" />s.
            </summary>
            <value>
                The health check types.
            </value>
        </member>
        <member name="P:App.Metrics.DependencyInjection.Internal.StaticHealthCheckTypeProvider.App#Metrics#Health#Abstractions#IHealthCheckTypeProvider#HealthCheckTypes">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.DependencyInjection.Internal.StaticMetricsAssemblyProvider">
            <summary>
                A <see cref="T:App.Metrics.DependencyInjection.Internal.IMetricsAssemblyProvider" /> with a fixed set of candidate assemblies.
            </summary>
        </member>
        <member name="P:App.Metrics.DependencyInjection.Internal.StaticMetricsAssemblyProvider.CandidateAssemblies">
            <summary>
                Gets the list of candidate assemblies.
            </summary>
            <value>
                The candidate assemblies.
            </value>
        </member>
        <member name="P:App.Metrics.DependencyInjection.Internal.StaticMetricsAssemblyProvider.App#Metrics#DependencyInjection#Internal#IMetricsAssemblyProvider#CandidateAssemblies">
            <summary>
                Gets the sequence of candidate <see cref="T:System.Reflection.Assembly" /> instances that the application
                uses for discovery of App.Metrics specific types.
            </summary>
            <value>
                The candidate assemblies.
            </value>
        </member>
        <member name="T:App.Metrics.Filtering.DefaultMetricsFilter">
            <summary>
                Provides the ability to filter metrics by Context, Type, Name etc.
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.Filtering.IFilterMetrics" />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.IsApdexMatch(App.Metrics.Apdex.ApdexValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.IsCounterMatch(App.Metrics.Counter.CounterValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.IsGaugeMatch(App.Metrics.Gauge.GaugeValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.IsHistogramMatch(App.Metrics.Histogram.HistogramValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.IsContextMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.IsMeterMatch(App.Metrics.Meter.MeterValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.IsTimerMatch(App.Metrics.Timer.TimerValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WhereContext(System.Predicate{System.String})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WhereContext(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WhereMetricName(System.Predicate{System.String})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WhereMetricNameStartsWith(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WhereMetricTaggedWithKey(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WhereMetricTaggedWithKeyValue(App.Metrics.Filtering.TagKeyValueFilter)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WhereType(App.Metrics.MetricType[])">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WithEnvironmentInfo(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Filtering.DefaultMetricsFilter.WithHealthChecks(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Internal.NoOpMetricsFilter.ReportEnvironment">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Internal.NoOpMetricsFilter.ReportHealthChecks">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.IsApdexMatch(App.Metrics.Apdex.ApdexValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.IsCounterMatch(App.Metrics.Counter.CounterValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.IsGaugeMatch(App.Metrics.Gauge.GaugeValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.IsHistogramMatch(App.Metrics.Histogram.HistogramValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.IsContextMatch(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.IsMeterMatch(App.Metrics.Meter.MeterValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.IsTimerMatch(App.Metrics.Timer.TimerValueSource)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WhereContext(System.Predicate{System.String})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WhereContext(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WhereMetricName(System.Predicate{System.String})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WhereMetricNameStartsWith(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WhereMetricTaggedWithKey(System.String[])">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WhereMetricTaggedWithKeyValue(App.Metrics.Filtering.TagKeyValueFilter)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WhereType(App.Metrics.MetricType[])">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WithEnvironmentInfo(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Internal.NoOpMetricsFilter.WithHealthChecks(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Gauge.DefaultGaugeBuilder.Build(System.Func{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Gauge.DefaultGaugeManager.#ctor(App.Metrics.Gauge.Abstractions.IBuildGaugeMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.DefaultGaugeManager" /> class.
            </summary>
            <param name="gaugeBuilder">The gauge builder.</param>
            <param name="registry">The registry storing all metric data.</param>
        </member>
        <member name="M:App.Metrics.Gauge.DefaultGaugeManager.SetValue(App.Metrics.Core.Options.GaugeOptions,System.Func{System.Double})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Gauge.DefaultGaugeManager.SetValue(App.Metrics.Core.Options.GaugeOptions,System.Func{App.Metrics.Core.Abstractions.IMetricValueProvider{System.Double}})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Gauge.DefaultGaugeMetricProvider.#ctor(App.Metrics.Registry.Abstractions.IMetricsRegistry)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.DefaultGaugeMetricProvider" /> class.
            </summary>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:App.Metrics.Gauge.DefaultGaugeMetricProvider.Instance(App.Metrics.Core.Options.GaugeOptions,System.Func{App.Metrics.Core.Abstractions.IMetricValueProvider{System.Double}})">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Gauge.DerivedGauge.Value">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Gauge.DerivedGauge.GetValue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Gauge.FunctionGauge">
            <summary>
                A Gauge metric using a function to provide the instantaneous value to record
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />
        </member>
        <member name="P:App.Metrics.Gauge.FunctionGauge.Value">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Gauge.FunctionGauge.GetValue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Gauge.GaugeValueSource">
            <summary>
                Combines the value of a gauge (a double) with the defined unit for the value.
            </summary>
        </member>
        <member name="M:App.Metrics.Gauge.HitPercentageGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Meter.Abstractions.IMeter)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitPercentageGauge" /> class.
            </summary>
            <param name="hitMeter">The hit meter.</param>
            <param name="totalMeter">The total meter.</param>
            <remarks>
                Creates a new HitPercentageGauge with externally tracked Meters, and uses the OneMinuteRate from the MeterValue of
                the meters.
            </remarks>
        </member>
        <member name="M:App.Metrics.Gauge.HitPercentageGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Meter.Abstractions.IMeter,System.Func{App.Metrics.Meter.MeterValue,System.Double})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitPercentageGauge" /> class.
            </summary>
            <param name="hitMeter">The numerator meter to use.</param>
            <param name="totalMeter">The denominator meter to use.</param>
            <param name="meterRateFunc">
                The function to extract a value from the MeterValue. Will be applied to both the numerator
                and denominator meters.
            </param>
            <remarks>
                Creates a new HitPercentageGauge with externally tracked Meters, and uses the provided meter rate function to
                extract the value for the percentage.
            </remarks>
        </member>
        <member name="M:App.Metrics.Gauge.HitPercentageGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Timer.Abstractions.ITimer)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitPercentageGauge" /> class.
            </summary>
            <param name="hitMeter">The numerator meter to use.</param>
            <param name="totalTimer">The denominator meter to use.</param>
            <remarks>
                Creates a new HitPercentageGauge with externally tracked Meter and Timer, and uses the OneMinuteRate from the
                MeterValue of the meters.
            </remarks>
        </member>
        <member name="M:App.Metrics.Gauge.HitPercentageGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Timer.Abstractions.ITimer,System.Func{App.Metrics.Meter.MeterValue,System.Double})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitPercentageGauge" /> class.
            </summary>
            <param name="hitMeter">The numerator meter to use.</param>
            <param name="totalTimer">The denominator timer to use.</param>
            <param name="meterRateFunc">
                The function to extract a value from the MeterValue. Will be applied to both the numerator
                and denominator meters.
            </param>
            <remarks>
                Creates a new HitPercentageGauge with externally tracked Meter and Timer, and uses the provided meter rate function
                to extract the value for the percentage.
            </remarks>
        </member>
        <member name="M:App.Metrics.Gauge.HitRatioGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Meter.Abstractions.IMeter)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitRatioGauge" /> class.
            </summary>
            <param name="hitMeter">The hit meter.</param>
            <param name="totalMeter">The total meter.</param>
            <remarks>
                Creates a new HitRatioGauge with externally tracked Meters, and uses the OneMinuteRate from the MeterValue of the
                meters.
            </remarks>
        </member>
        <member name="M:App.Metrics.Gauge.HitRatioGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Meter.Abstractions.IMeter,System.Func{App.Metrics.Meter.MeterValue,System.Double})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitRatioGauge" /> class.
            </summary>
            <param name="hitMeter">The numerator meter to use for the ratio.</param>
            <param name="totalMeter">The denominator meter to use for the ratio.</param>
            <param name="meterRateFunc">
                The function to extract a value from the MeterValue. Will be applied to both the numerator
                and denominator meters.
            </param>
            <remarks>
                Creates a new HitRatioGauge with externally tracked Meters, and uses the provided meter rate function to extract
                the value for the ratio.
            </remarks>
        </member>
        <member name="M:App.Metrics.Gauge.HitRatioGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Timer.Abstractions.ITimer)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitRatioGauge" /> class.
            </summary>
            <param name="hitMeter">The numerator meter to use for the ratio.</param>
            <param name="totalTimer">The denominator meter to use for the ratio.</param>
            <remarks>
                Creates a new HitRatioGauge with externally tracked Meter and Timer, and uses the OneMinuteRate from the MeterValue
                of the meters.
            </remarks>
        </member>
        <member name="M:App.Metrics.Gauge.HitRatioGauge.#ctor(App.Metrics.Meter.Abstractions.IMeter,App.Metrics.Timer.Abstractions.ITimer,System.Func{App.Metrics.Meter.MeterValue,System.Double})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.HitRatioGauge" /> class.
            </summary>
            <param name="hitMeter">The numerator meter to use for the ratio.</param>
            <param name="totalTimer">The denominator timer to use for the ratio.</param>
            <param name="meterRateFunc">
                The function to extract a value from the MeterValue. Will be applied to both the numerator
                and denominator meters.
            </param>
            <remarks>
                Creates a new HitRatioGauge with externally tracked Meter and Timer, and uses the provided meter rate function to
                extract the value for the ratio.
            </remarks>
        </member>
        <member name="T:App.Metrics.Gauge.PercentageGauge">
            <summary>
                A Gauge metric using two functions to calculate a percentage
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />
        </member>
        <member name="M:App.Metrics.Gauge.PercentageGauge.#ctor(System.Func{System.Double},System.Func{System.Double})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.PercentageGauge" /> class.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="T:App.Metrics.Gauge.RatioGauge">
            <summary>
                A Gauge metric using two functions to calculate a ratio to record
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" />
        </member>
        <member name="M:App.Metrics.Gauge.RatioGauge.#ctor(System.Func{System.Double},System.Func{System.Double})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Gauge.RatioGauge" /> class.
            </summary>
            <param name="numerator">The numerator.</param>
            <param name="denominator">The denominator.</param>
        </member>
        <member name="T:App.Metrics.Gauge.Abstractions.IMeasureGaugeMetrics">
            <summary>
                Provides access to the API allowing Gauge Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Gauge.Abstractions.IMeasureGaugeMetrics.SetValue(App.Metrics.Core.Options.GaugeOptions,System.Func{App.Metrics.Core.Abstractions.IMetricValueProvider{System.Double}})">
            <summary>
                Records <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" /> which is a point in time instantaneous value
            </summary>
            <param name="options">The details of the gauge that is being measured.</param>
            <param name="valueProvider">A function that returns custom value provider for the gauge.</param>
        </member>
        <member name="M:App.Metrics.Gauge.Abstractions.IMeasureGaugeMetrics.SetValue(App.Metrics.Core.Options.GaugeOptions,System.Func{System.Double})">
            <summary>
                Records <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" /> which is a point in time instantaneous value
            </summary>
            <param name="options">The details of the gauge that is being measured.</param>
            <param name="valueProvider">A function that returns the value for the gauge.</param>
        </member>
        <member name="M:App.Metrics.Gauge.Abstractions.IProvideGaugeMetrics.Instance(App.Metrics.Core.Options.GaugeOptions,System.Func{App.Metrics.Core.Abstractions.IMetricValueProvider{System.Double}})">
            <summary>
                Records <see cref="T:App.Metrics.Abstractions.MetricTypes.IGaugeMetric" /> which is a point in time instantaneous value
            </summary>
            <param name="options">The details of the gauge that is being measured.</param>
            <param name="valueProvider">A function that returns custom value provider for the gauge.</param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.#ctor(System.String,System.Func{System.Threading.Tasks.Task{System.String}})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck" /> class.
            </summary>
            <param name="name">A descriptive name for the health check.</param>
            <param name="check">A function returning a message that is a healthy result.</param>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.#ctor(System.String,System.Func{System.Threading.Tasks.Task{App.Metrics.Health.HealthCheckResult}})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck" /> class.
            </summary>
            <param name="name">A descriptive name for the health check.</param>
            <param name="check">A function returning either a healthy or un-healthy result.</param>
        </member>
        <member name="P:App.Metrics.Health.HealthCheck.Name">
            <summary>
                Gets the descriptive name for the health check.
            </summary>
            <value>
                The name.
            </value>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.ExecuteAsync(System.Threading.CancellationToken)">
            <summary>
                Executes the health check asynchrously
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
                The <see cref="T:App.Metrics.Health.HealthCheck.Result" /> of running the health check
            </returns>
        </member>
        <member name="T:App.Metrics.Health.HealthCheck.Result">
            <summary>
                Represents the result of running a <see cref="T:App.Metrics.Health.HealthCheck" />
            </summary>
        </member>
        <member name="M:App.Metrics.Health.HealthCheck.Result.#ctor(System.String,App.Metrics.Health.HealthCheckResult)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.HealthCheck.Result" /> struct.
            </summary>
            <param name="name">A descriptive name for the health check</param>
            <param name="check">The result of executing a health check.</param>
        </member>
        <member name="T:App.Metrics.Health.HealthCheckResult">
            <summary>
                Result of a health check
            </summary>
        </member>
        <member name="P:App.Metrics.Health.HealthCheckResult.Message">
            <summary>
            Gets the status message of the check. A status can be provided for both healthy and unhealthy states.
            </summary>
            <value>
            The message.
            </value>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckResult.Status">
            <summary>
                True if the check was healthy, degraded or unhealthy.
            </summary>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Degraded(System.String,System.Object[])">
            <summary>
                Create a Degraded status response. This is useful for when a health check may
                fail but the application itself is still functioning correct. E.g. There could be a
                health check checking the number of messages in a queue, if that number reaches a
                specificied threshold, a degraded status could be returned rather than raising a critical alert.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>A degraded health check result</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Degraded(System.Exception)">
            <summary>
                Create a Degraded status response. This is useful for when a health check may
                fail but the application itself is still functioning correct. E.g. There could be a
                health check checking the number of messages in a queue, if that number reaches a
                specificied threshold, a degraded status could be returned rather than raising a critical alert.
            </summary>
            <param name="exception">Exception to use for reason.</param>
            <returns>Degraded status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Degraded">
            <summary>
                Create a Degraded status response. This is useful for when a health check may
                fail but the application itself is still functioning correct. E.g. There could be a
                health check checking the number of messages in a queue, if that number reaches a
                specificied threshold, a degraded status could be returned rather than raising a critical alert.
            </summary>
            <returns>Degraded status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Healthy">
            <summary>
                Create a healthy status response.
            </summary>
            <returns>Healthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Healthy(System.String,System.Object[])">
            <summary>
                Create a healthy status response.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>Healthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Ignore">
            <summary>
                Ignores this health check.
            </summary>
            <returns>An ignored health check restul</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Unhealthy">
            <summary>
                Create a unhealthy status response.
            </summary>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Unhealthy(System.String,System.Object[])">
            <summary>
                Create a unhealthy status response.
            </summary>
            <param name="message">Status message.</param>
            <param name="values">Values to format the status message with.</param>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="M:App.Metrics.Health.HealthCheckResult.Unhealthy(System.Exception)">
            <summary>
                Create a unhealthy status response.
            </summary>
            <param name="exception">Exception to use for reason.</param>
            <returns>Unhealthy status response.</returns>
        </member>
        <member name="T:App.Metrics.Health.HealthCheckStatus">
            <summary>
                Posible status values of a health check result
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Healthy">
            <summary>
                The check is healthy
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Degraded">
            <summary>
                The check is degraded, failing but not critical
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Unhealthy">
            <summary>
                The check is unhealthy
            </summary>
        </member>
        <member name="F:App.Metrics.Health.HealthCheckStatus.Ignored">
            <summary>
                The check was ignored
            </summary>
        </member>
        <member name="T:App.Metrics.Health.HealthStatus">
            <summary>
                Structure describing the status of executing all the health checks operations.
            </summary>
        </member>
        <member name="P:App.Metrics.Health.HealthStatus.HasRegisteredChecks">
            <summary>
                Gets a value indicating whether this health checks have registered checks.
            </summary>
            <value>
                <c>true</c> if this instance has registered checks; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="P:App.Metrics.Health.HealthStatus.Results">
            <summary>
                Gets result of each health check operation
            </summary>
            <value>
                The health check results.
            </value>
        </member>
        <member name="P:App.Metrics.Health.HealthStatus.Status">
            <summary>
                Gets all health checks passed.
            </summary>
            <value>
                The status.
            </value>
        </member>
        <member name="T:App.Metrics.Health.Abstractions.IProvideHealth">
            <summary>
                Provides access to the current health status of the application by executing regsitered <see cref="T:App.Metrics.Health.HealthCheck" />s
            </summary>
        </member>
        <member name="M:App.Metrics.Health.Abstractions.IProvideHealth.ReadStatusAsync(System.Threading.CancellationToken)">
            <summary>
                Executes all regsitered health checks within the application
            </summary>
            <param name="cancellationToken">The cancellation token.</param>
            <returns>
                The current health status of the application. A single health check failure will result in an un-healthy
                result
            </returns>
        </member>
        <member name="M:App.Metrics.Health.Internal.DefaultHealthProvider.#ctor(Microsoft.Extensions.Logging.ILogger{App.Metrics.Health.Internal.DefaultHealthProvider},App.Metrics.Health.Abstractions.IHealthCheckFactory)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Health.Internal.DefaultHealthProvider" /> class.
            </summary>
            <param name="logger">The logger.</param>
            <param name="healthCheckFactory">The health check factory.</param>
        </member>
        <member name="M:App.Metrics.Health.Internal.DefaultHealthProvider.ReadStatusAsync(System.Threading.CancellationToken)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.HealthCheckFactoryExtensions.RegisterProcessPhysicalMemoryHealthCheck(App.Metrics.Health.Abstractions.IHealthCheckFactory,System.String,System.Int64)">
            <summary>
                Registers a health check on the process confirming that the current amount of physical memory is below the
                threshold.
            </summary>
            <param name="factory">The health check factory where the health check is registered.</param>
            <param name="name">The name of the health check.</param>
            <param name="thresholdBytes">The physical memory threshold in bytes.</param>
            <returns>The health check factory instance</returns>
        </member>
        <member name="M:App.Metrics.HealthCheckFactoryExtensions.RegisterProcessPrivateMemorySizeHealthCheck(App.Metrics.Health.Abstractions.IHealthCheckFactory,System.String,System.Int64)">
            <summary>
                Registers a health check on the process confirming that the current amount of private memory is below the
                threshold.
            </summary>
            <param name="factory">The health check factory where the health check is registered.</param>
            <param name="name">The name of the health check.</param>
            <param name="thresholdBytes">The private memory threshold in bytes.</param>
            <returns>The health check factory instance</returns>
        </member>
        <member name="M:App.Metrics.HealthCheckFactoryExtensions.RegisterProcessVirtualMemorySizeHealthCheck(App.Metrics.Health.Abstractions.IHealthCheckFactory,System.String,System.Int64)">
            <summary>
                Registers a health check on the process confirming that the current amount of virtual memory is below the
                threshold.
            </summary>
            <param name="factory">The health check factory where the health check is registered.</param>
            <param name="name">The name of the health check.</param>
            <param name="thresholdBytes">The virtual memory threshold in bytes.</param>
            <returns>The health check factory instance</returns>
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramBuilder.Build(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramManager.#ctor(App.Metrics.Histogram.Abstractions.IBuildHistogramMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Histogram.DefaultHistogramManager" /> class.
            </summary>
            <param name="registry">The registry storing all metric data.</param>
            <param name="histogramBuilder">The histogram builder.</param>
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramManager.Update(App.Metrics.Core.Options.HistogramOptions,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramManager.Update(App.Metrics.Core.Options.HistogramOptions,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetric.#ctor(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Histogram.DefaultHistogramMetric" /> class.
            </summary>
            <param name="reservoir">The reservoir to use for sampling.</param>
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetric.GetValue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetric.Reset">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetric.Update(System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetric.Update(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetricProvider.#ctor(App.Metrics.Histogram.Abstractions.IBuildHistogramMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Histogram.DefaultHistogramMetricProvider" /> class.
            </summary>
            <param name="histogramBuilder">The histogram builder.</param>
            <param name="registry">The registry.</param>
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetricProvider.Instance(App.Metrics.Core.Options.HistogramOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Histogram.DefaultHistogramMetricProvider.Instance``1(App.Metrics.Core.Options.HistogramOptions,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Histogram.HistogramValue">
            <summary>
                The value reported by a Histogram Metric
            </summary>
        </member>
        <member name="T:App.Metrics.Histogram.HistogramValueSource">
            <summary>
                Combines the value of the histogram with the defined unit for the value.
            </summary>
        </member>
        <member name="T:App.Metrics.Histogram.Abstractions.IHistogram">
            <summary>
                A Histogram measures the distribution of values in a stream of data: e.g., the number of results returned by a
                search.
            </summary>
        </member>
        <member name="M:App.Metrics.Histogram.Abstractions.IHistogram.Update(System.Int64,System.String)">
            <summary>
                Records a value.
            </summary>
            <param name="value">Value to be added to the histogram.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Histogram.Abstractions.IHistogram.Update(System.Int64)">
            <summary>
                Records a value.
            </summary>
            <param name="value">Value to be added to the histogram.</param>
        </member>
        <member name="T:App.Metrics.Histogram.Abstractions.IMeasureHistogramMetrics">
            <summary>
                Provides access to the API allowing Histogram Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Histogram.Abstractions.IMeasureHistogramMetrics.Update(App.Metrics.Core.Options.HistogramOptions,System.Int64)">
            <summary>
                Updates a <see cref="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric" /> which measures the distribution of values in a stream of data. Records
                the min, mean,
                max and standard deviation of values and also quantiles such as the medium, 95th percentile, 98th percentile, 99th
                percentile and 99.9th percentile
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <param name="value">The value to be added to the histogram.</param>
        </member>
        <member name="M:App.Metrics.Histogram.Abstractions.IMeasureHistogramMetrics.Update(App.Metrics.Core.Options.HistogramOptions,System.Int64,System.String)">
            <summary>
                Updates a <see cref="T:App.Metrics.Abstractions.MetricTypes.IHistogramMetric" /> which measures the distribution of values in a stream of data. Records
                the min, mean,
                max and standard deviation of values and also quantiles such as the medium, 95th percentile, 98th percentile, 99th
                percentile and 99.9th percentile
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <param name="value">The value to be added to the histogram.</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
        </member>
        <member name="M:App.Metrics.Histogram.Abstractions.IProvideHistogramMetrics.Instance(App.Metrics.Core.Options.HistogramOptions)">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Histogram.Abstractions.IHistogram" />
            </summary>
            <param name="options">The details of the histogram that is being measured</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Histogram.Abstractions.IHistogram" /> or the existing registered instance of the histogram</returns>
        </member>
        <member name="M:App.Metrics.Histogram.Abstractions.IProvideHistogramMetrics.Instance``1(App.Metrics.Core.Options.HistogramOptions,System.Func{``0})">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Histogram.Abstractions.IHistogram" />
            </summary>
            <typeparam name="T">The type of <see cref="T:App.Metrics.Histogram.Abstractions.IHistogram" /> to instantiate</typeparam>
            <param name="options">The details of the <see cref="T:App.Metrics.Histogram.Abstractions.IHistogram" /> that is being measured</param>
            <param name="builder">The function used to build the histogram metric.</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Histogram.Abstractions.IHistogram" /> or the existing registered instance of the histogram</returns>
        </member>
        <member name="M:App.Metrics.Infrastructure.EnvironmentInfo.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Infrastructure.EnvironmentInfo.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Infrastructure.EnvironmentInfoEntry.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Infrastructure.EnvironmentInfoEntry.GetHashCode">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Infrastructure.StringBuilderCache">
            <summary>
                Original Source: https://github.com/dotnet/coreclr/blob/master/src/mscorlib/src/System/Text/StringBuilderCache.cs
            </summary>
        </member>
        <member name="M:App.Metrics.Infrastructure.StringBuilderCache.Acquire(System.Int32)">
            <summary>
                Acquire is used to get a string builder to use of a particular size.It can be called any number of times, if a
                stringbuilder is in the
                cache then it will be returned and the cache emptied. Subsequent calls will return a new stringbuilder.
            </summary>
            <param name="capacity">The capacity.</param>
            <returns>A new or cached string buildeer for this thread</returns>
        </member>
        <member name="M:App.Metrics.Infrastructure.StringBuilderCache.GetStringAndRelease(System.Text.StringBuilder)">
            <summary>
                ToString() the string builder, release it to the cache and return the resulting string
            </summary>
            <param name="sb">The string builder.</param>
            <returns>The resulting string</returns>
        </member>
        <member name="M:App.Metrics.Infrastructure.StringBuilderCache.Release(System.Text.StringBuilder)">
            <summary>
                Place the specified builder in the cache if it is not too big. The stringbuilder should not be used after it has
                been released.
                Unbalanced Releases are perfectly acceptable. It will merely cause the runtime to create a new stringbuilder next
                time Acquire is
                called.
            </summary>
            <param name="sb">The string builder instance.</param>
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterBuilder.Build(App.Metrics.IClock)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterManager.#ctor(App.Metrics.Meter.Abstractions.IBuildMeterMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Meter.DefaultMeterManager" /> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="registry">The registry storing all metric data.</param>
            <param name="meterBuilder">The meter builder.</param>
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterManager.Mark(App.Metrics.Core.Options.MeterOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterManager.Mark(App.Metrics.Core.Options.MeterOptions,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterManager.Mark(App.Metrics.Core.Options.MeterOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterManager.Mark(App.Metrics.Core.Options.MeterOptions,App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterManager.Mark(App.Metrics.Core.Options.MeterOptions,System.Int64,App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterManager.Mark(App.Metrics.Core.Options.MeterOptions,System.Int64,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.#ctor(App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Meter.DefaultMeterMetric" /> class.
            </summary>
            <param name="systemClock">The system clock.</param>
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.#ctor(App.Metrics.IClock,App.Metrics.Scheduling.Abstractions.IScheduler)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Meter.DefaultMeterMetric" /> class.
            </summary>
            <param name="clock">The clock.</param>
            <param name="scheduler">The scheduler.</param>
        </member>
        <member name="P:App.Metrics.Meter.DefaultMeterMetric.Value">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.Reset">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.GetValue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.Mark">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.Mark(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.Mark(App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.Mark(App.Metrics.Tagging.MetricSetItem,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetric.Mark(System.String,System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetricProvider.#ctor(App.Metrics.Meter.Abstractions.IBuildMeterMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Meter.DefaultMeterMetricProvider" /> class.
            </summary>
            <param name="meterBuilder">The meter builder.</param>
            <param name="registry">The metrics registry.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetricProvider.Instance(App.Metrics.Core.Options.MeterOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Meter.DefaultMeterMetricProvider.Instance``1(App.Metrics.Core.Options.MeterOptions,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Meter.MeterValue">
            <summary>
                The value reported by a Meter Metric
            </summary>
        </member>
        <member name="T:App.Metrics.Meter.MeterValueSource">
            <summary>
                Combines the value of the meter with the defined unit and the rate unit at which the value is reported.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.SimpleMeter.Mark(System.Int64)">
            <summary>
                Marks the specified count.
            </summary>
            <param name="count">The count.</param>
        </member>
        <member name="M:App.Metrics.Meter.SimpleMeter.Reset">
            <summary>
                Resets all the meters values.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.SimpleMeter.GetValue(System.Double)">
            <summary>
                Gets the meters current value.
            </summary>
            <param name="elapsed">The elapsed time for calculating the mean rate.</param>
            <returns>The meters current value</returns>
        </member>
        <member name="T:App.Metrics.Meter.Abstractions.IMeasureMeterMetrics">
            <summary>
                Provides access to the API allowing Meter Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeasureMeterMetrics.Mark(App.Metrics.Core.Options.MeterOptions,System.Int64)">
            <summary>
                Marks a <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="amount">The amount to mark the meter.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeasureMeterMetrics.Mark(App.Metrics.Core.Options.MeterOptions)">
            <summary>
                Marks a <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" /> which increments an increment-only counter and measures the rate of events
                overtime, will mark as 1.
            </summary>
            <param name="options">The details of the meter that is being marked</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeasureMeterMetrics.Mark(App.Metrics.Core.Options.MeterOptions,System.String)">
            <summary>
                Marks a <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="item">The metric item within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeasureMeterMetrics.Mark(App.Metrics.Core.Options.MeterOptions,App.Metrics.Tagging.MetricSetItem)">
            <summary>
                Marks a <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="setItem">The <see cref="T:App.Metrics.Tagging.MetricSetItem" />  within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeasureMeterMetrics.Mark(App.Metrics.Core.Options.MeterOptions,System.Int64,System.String)">
            <summary>
                Marks a <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="amount">The amount to mark the meter.</param>
            <param name="item">The metric item within the set to mark.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeasureMeterMetrics.Mark(App.Metrics.Core.Options.MeterOptions,System.Int64,App.Metrics.Tagging.MetricSetItem)">
            <summary>
                Marks a <see cref="T:App.Metrics.Abstractions.MetricTypes.IMeterMetric" /> which increments an increment-only counter and measures the rate of events over
                time
            </summary>
            <param name="options">The details of the meter that is being marked</param>
            <param name="amount">The amount to mark the meter.</param>
            <param name="setItem">The <see cref="T:App.Metrics.Tagging.MetricSetItem" /> within the set to mark.</param>
        </member>
        <member name="T:App.Metrics.Meter.Abstractions.IMeter">
            <summary>
                A meter measures the rate at which a set of events occur, in a few different ways.
                The mean rate is the average rate of events. It’s generally useful for trivia,
                but as it represents the total rate for your application’s entire lifetime (e.g., the total number of requests
                handled,
                divided by the number of seconds the process has been running), it doesn’t offer a sense of recency.
                Luckily, meters also record three different exponentially-weighted moving average rates: the 1-, 5-, and 15-minute
                moving averages.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeter.Mark">
            <summary>
                Mark the occurrence of an event.
            </summary>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeter.Mark(System.String)">
            <summary>
                Mark the occurrence of an event for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="item" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="item">Item from the set for which to record the event.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeter.Mark(App.Metrics.Tagging.MetricSetItem)">
            <summary>
                Mark the occurrence of an event for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="setItem" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="setItem">Item from the set for which to record the event.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeter.Mark(App.Metrics.Tagging.MetricSetItem,System.Int64)">
            <summary>
                Mark the occurrence of an event for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="setItem" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="setItem">Item from the set for which to record the event.</param>
            <param name="amount">The amount to mark the meter.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeter.Mark(System.Int64)">
            <summary>
                Mark the occurrence of <paramref name="amount" /> events.
            </summary>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IMeter.Mark(System.String,System.Int64)">
            <summary>
                Mark the occurrence of <paramref name="amount" /> events for an item in a set.
                The total rate of the event is updated, but the meter will also keep track and update a specific rate for each
                <paramref name="item" /> registered.
                The meter value will contain the total rate and for each registered item the specific rate and percentage of total
                count.
            </summary>
            <param name="item">Item from the set for which to record the events.</param>
            <param name="amount">The amount.</param>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IProvideMeterMetrics.Instance(App.Metrics.Core.Options.MeterOptions)">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Meter.Abstractions.IMeter" />
            </summary>
            <param name="options">The details of the <see cref="T:App.Metrics.Meter.Abstractions.IMeter" />  that is being marked</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Meter.Abstractions.IMeter" /> or the existing registered instance of the meter</returns>
        </member>
        <member name="M:App.Metrics.Meter.Abstractions.IProvideMeterMetrics.Instance``1(App.Metrics.Core.Options.MeterOptions,System.Func{``0})">
            <summary>
                Instantiates an instance of a <see cref="T:App.Metrics.Meter.Abstractions.IMeter" />
            </summary>
            <typeparam name="T">The type of <see cref="T:App.Metrics.Meter.Abstractions.IMeter" /> to instantiate</typeparam>
            <param name="options">The details of the <see cref="T:App.Metrics.Meter.Abstractions.IMeter" />  that is being marked</param>
            <param name="builder">The function used to build the meter metric.</param>
            <returns>A new instance of an <see cref="T:App.Metrics.Meter.Abstractions.IMeter" /> or the existing registered instance of the meter</returns>
        </member>
        <member name="P:App.Metrics.Registry.Internal.DefaultMetricRegistryManager.ApdexScores">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Registry.Internal.DefaultMetricRegistryManager.Counters">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Registry.Internal.DefaultMetricRegistryManager.Gauges">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Registry.Internal.DefaultMetricRegistryManager.Histograms">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Registry.Internal.DefaultMetricRegistryManager.Meters">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.Registry.Internal.DefaultMetricRegistryManager.Timers">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Registry.Internal.DefaultMetricsRegistry.Disable">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Registry.Internal.NullMetricsRegistry.Disable">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Reporting.Internal.NoOpReporter.Dispose">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Reporting.Internal.Reporter.Dispose">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir">
            <summary>
                A histogram with an exponentially decaying reservoir produces
                <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see> which are representative of (roughly) the last
                five minutes of data.
                <p>
                    The resevoir is produced by using a
                    <see href="http://dimacs.rutgers.edu/~graham/pubs/papers/fwddecay.pdf">forward-decaying resevoir</see> with an
                    exponential weighty towards recent data unlike a Uniform Reservoir which does not provide a sense of recency.
                </p>
                <p>
                    This sampling resevoir can be used when you are interested in recent changes to the distribution of data rather
                    than a median on the lifetime of the histgram.
                </p>
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir" /> class.
            </summary>
            <remarks>
                The default size and alpha values offer a 99.9% confidence level with a 5% margin of error assuming a normal
                distribution and heavily biases the reservoir to the past 5 minutes of measurements.
            </remarks>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.#ctor(System.Int32,System.Double)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir" /> class.
            </summary>
            <remarks>
                The default size and alpha values offer a 99.9% confidence level with a 5% margin of error assuming a normal
                distribution and heavily biases the reservoir to the past 5 minutes of measurements.
            </remarks>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir.</param>
            <param name="alpha">
                The alpha value, e.g 0.015 will heavily biases the reservoir to the past 5 mins of measurements. The higher the
                value the more biased the reservoir will be towards newer values.
            </param>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.#ctor(System.Int32,System.Double,App.Metrics.IClock,App.Metrics.Scheduling.Abstractions.IScheduler)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir" /> class.
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir</param>
            <param name="alpha">
                The alpha value, e.g 0.015 will heavily biases the reservoir to the past 5 mins of measurements. The higher the
                value the more biased the reservoir will be towards newer values.
            </param>
            <param name="clock">The <see cref="T:App.Metrics.IClock">clock</see> type to use for calculating processing time.</param>
            <param name="scheduler">
                The scheduler to to rescale, allowing decayed weights to be tracked. Really only provided here
                for testing purposes.
            </param>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.Size">
            <summary>
                Gets the size.
            </summary>
            <value>
                The size.
            </value>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.Dispose">
            <summary>
                Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources.
            </summary>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.Dispose(System.Boolean)">
            <summary>
                Releases unmanaged and - optionally - managed resources.
            </summary>
            <param name="disposing">
                <c>true</c> to release both managed and unmanaged resources; <c>false</c> to release only
                unmanaged resources.
            </param>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.GetSnapshot(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.GetSnapshot">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.Reset">
            <inheritdoc cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.Update(System.Int64,System.String)">
            <inheritdoc cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.Update(System.Int64)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.DefaultForwardDecayingReservoir.Rescale">
            <summary>
                A common feature of the above techniques—indeed, the key technique that
                allows us to track the decayed weights efficiently—is that they maintain
                counts and other quantities based on g(ti − L), and only scale by g(t − L)
                at query time. But while g(ti −L)/g(t−L) is guaranteed to lie between zero
                and one, the intermediate values of g(ti − L) could become very large. For
                polynomial functions, these values should not grow too large, and should be
                effectively represented in practice by floating point values without loss of
                precision. For exponential functions, these values could grow quite large as
                new values of (ti − L) become large, and potentially exceed the capacity of
                common floating point types. However, since the values stored by the
                algorithms are linear combinations of g values (scaled sums), they can be
                rescaled relative to a new landmark. That is, by the analysis of exponential
                decay in Section III-A, the choice of L does not affect the final result. We
                can therefore multiply each value based on L by a factor of exp(−α(L′ − L)),
                and obtain the correct value as if we had instead computed relative to a new
                landmark L′ (and then use this new L′ at query time). This can be done with
                a linear pass over whatever data structure is being used."
            </summary>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.#ctor(System.Int64,System.Collections.Generic.IEnumerable{App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSample})">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot" /> class.
            </summary>
            <param name="count">The count of the sample set.</param>
            <param name="values">The values within the sample set.</param>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Count">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Max">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.MaxUserValue">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Mean">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Median">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Min">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.MinUserValue">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Percentile75">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Percentile95">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Percentile98">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Percentile99">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Percentile999">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Size">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.StdDev">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.Values">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.ExponentialDecay.WeightedSnapshot.GetValue(System.Double)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir">
            <summary>
                A Reservoir implementation backed by a sliding window that stores only the measurements made in the last N seconds
                (or other time unit).
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir" /> class.
            </summary>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir" /> class.
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir</param>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir.GetSnapshot(System.Boolean)">
            <inheritdoc cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir.GetSnapshot">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir.Reset">
            <inheritdoc cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir.Update(System.Int64,System.String)">
            <inheritdoc cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.SlidingWindow.DefaultSlidingWindowReservoir.Update(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir">
            <summary>
                A histogram with a uniform reservoir produces <see href="https://en.wikipedia.org/wiki/Quantile">quantiles</see>
                which are valid for the entirely of the histogram’s lifetime.
                <p>
                    This sampling resevoir can be used when you are interested in long-term measurements, it does not offer a sence
                    of recency.
                </p>
                <p>
                    All samples are equally likely to be evicted when the reservoir is at full capacity.
                </p>
            </summary>
            <remarks>
                Uses <see href="http://www.cs.umd.edu/~samir/498/vitter.pdf">Vitter's Algorithm R</see> for
                <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir">resevoir</see> sampling
            </remarks>
            <seealso cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.#ctor">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir" /> class.
            </summary>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.#ctor(System.Int32)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir" /> class.
            </summary>
            <param name="sampleSize">The number of samples to keep in the sampling reservoir</param>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.Size">
            <summary>
                Gets the size.
            </summary>
            <value>
                The size.
            </value>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.GetSnapshot(System.Boolean)">
            <inheritdoc cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.GetSnapshot">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.Reset">
            <inheritdoc cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.Update(System.Int64,System.String)">
            <summary>
                Updates the sample set adding the specified value using
                <see href="http://www.cs.umd.edu/~samir/498/vitter.pdf">Vitter's Algorithm R</see>.
            </summary>
            Algorithm R pseudo code
            <example>
                <code>
                <![CDATA[
                -- S has items to sample, R will contain the result
                ReservoirSample(S[1..n], R[1..k])
                    -- fill the reservoir array
                    for i = 1 to k
                        R[i] := S[i]
                        -- replace elements with gradually decreasing probability
                    for i = k+1 to n
                        j := random(1, i)   -- important: inclusive range
                        if j <= k
                        R[j] := S[i]
                ]]>
            </code>
            </example>
            <param name="value">The value to add to the sample set.</param>
            <param name="userValue">The user value to track, which records the last, min and max user values within the sample.</param>
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir.Update(System.Int64)">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot">
            <summary>
                Represents a statistical snapshot of a sample set when using
                <see href="http://www.cs.umd.edu/~samir/498/vitter.pdf">Vitter's Algorithm R</see>.
                This is the snapshot used a histogram with a <see cref="T:App.Metrics.ReservoirSampling.Uniform.DefaultAlgorithmRReservoir">uniform reservoir </see>
            </summary>
            <seealso cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoirSnapshot" />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.#ctor(System.Int64,System.Collections.Generic.IEnumerable{System.Int64},System.Boolean,System.String,System.String)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot" /> class.
            </summary>
            <param name="count">The count of the sample set.</param>
            <param name="values">The values within the sample set.</param>
            <param name="valuesAreSorted">if set to <c>true</c> [values are already sorted].</param>
            <param name="minUserValue">The minimum user value.</param>
            <param name="maxUserValue">The maximum user value.</param>
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Count">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Max">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.MaxUserValue">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Mean">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Median">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Min">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.MinUserValue">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Percentile75">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Percentile95">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Percentile98">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Percentile99">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Percentile999">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Size">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.StdDev">
            <inheritdoc />
        </member>
        <member name="P:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.Values">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.ReservoirSampling.Uniform.UniformSnapshot.GetValue(System.Double)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Scheduling.DefaultTaskScheduler.#ctor(System.Boolean)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Scheduling.DefaultTaskScheduler" /> class.
            </summary>
            <param name="allowMulitpleTasks">
                if set to <c>true</c> allows more than one task to be created at a time, otherwise
                ensures the task hasn't yet started.
            </param>
        </member>
        <member name="M:App.Metrics.Scheduling.Abstractions.IScheduler.Interval(System.TimeSpan,System.Threading.Tasks.TaskCreationOptions,System.Action,System.Threading.CancellationToken)">
            <summary>
                Schedules at Task to run at the specified interval.
            </summary>
            <param name="pollInterval">The poll interval.</param>
            <param name="taskCreationOptions">The task creation options.</param>
            <param name="action">The action to run at the specified interval.</param>
            <param name="token">The Tasks cancellation token, each Tasks tokens are linked to this instance</param>
            <returns>A Task which executes the specified action at the give poll interval</returns>
        </member>
        <member name="M:App.Metrics.Scheduling.Abstractions.IScheduler.Interval(System.TimeSpan,System.Threading.Tasks.TaskCreationOptions,System.Action)">
            <summary>
                Schedules at Task to run at the specified interval. All Tasks created with this instance share the same
                cancellation token
            </summary>
            <param name="pollInterval">The poll interval.</param>
            <param name="taskCreationOptions">The task creation options.</param>
            <param name="action">The action to run at the specified interval.</param>
            <returns>A Task which executes the specified action at the give poll interval</returns>
        </member>
        <member name="M:App.Metrics.Scheduling.Abstractions.IScheduler.Stop">
            <summary>
                Stops the Tasks schduled with this instance by cancelling the cancellation token
            </summary>
        </member>
        <member name="T:App.Metrics.Tagging.MetricSetItem">
            <summary>
                <para>
                    Metric items provide the ability to track either a count or rate for each item in a counters or meters finite
                    set
                    respectively. They also track the overall percentage of each item in the set.
                </para>
                <para>
                    This is useful for example if we needed to track the total number of emails sent but also the count of each
                    type of emails sent or The total rate of emails sent but also the rate at which type of email was sent.
                </para>
            </summary>
        </member>
        <member name="M:App.Metrics.Tagging.MetricSetItem.#ctor(System.String[],System.String[])">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Tagging.MetricSetItem" /> struct.
            </summary>
            <param name="keys">The keys to use to generate a name for the set item.</param>
            <param name="values">The values to use to generate a name for the set item.</param>
            <exception cref="T:System.InvalidOperationException">
                keys length must be equal to values length
            </exception>
            <exception cref="T:System.ArgumentNullException">
                keys cannot be null
                or
                values items cannot be null
                or
                keys cannot be empty
                or
                values cannot be empty
            </exception>
        </member>
        <member name="M:App.Metrics.Tagging.MetricSetItem.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Tagging.MetricSetItem.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Tagging.MetricSetItem.ToString">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Tagging.MetricSetItem.Equals(App.Metrics.Tagging.MetricSetItem)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Tagging.MetricTags.Equals(System.Object)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Tagging.MetricTags.GetHashCode">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Tagging.MetricTags.Equals(App.Metrics.Tagging.MetricTags)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerBuilder.Build(App.Metrics.Abstractions.MetricTypes.IHistogramMetric,App.Metrics.IClock)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerBuilder.Build(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir},App.Metrics.IClock)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerManager.#ctor(App.Metrics.Timer.Abstractions.IBuildTimerMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Timer.DefaultTimerManager" /> class.
            </summary>
            <param name="registry">The registry storing all metric data.</param>
            <param name="timerBuilder">The timer builder.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerManager.Time(App.Metrics.Core.Options.TimerOptions,System.Action)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerManager.Time(App.Metrics.Core.Options.TimerOptions,System.Action,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerManager.Time(App.Metrics.Core.Options.TimerOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerManager.Time(App.Metrics.Core.Options.TimerOptions,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.#ctor(App.Metrics.Abstractions.MetricTypes.IHistogramMetric,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Timer.DefaultTimerMetric" /> class.
            </summary>
            <param name="histogram">The histogram implementation to use.</param>
            <param name="clock">The clock to use to measure processing duration.</param>
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.#ctor(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir},App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Timer.DefaultTimerMetric" /> class.
            </summary>
            <param name="reservoir">The reservoir implementation to use for sampling values to generate the histogram.</param>
            <param name="clock">The clock to use to measure processing duration.</param>
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.#ctor(System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir},App.Metrics.Abstractions.MetricTypes.IMeterMetric,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Timer.DefaultTimerMetric" /> class.
            </summary>
            <param name="reservoir">The reservoir to use for sampling within the histogram.</param>
            <param name="meter">The meter implementation to use to genreate the rate of events over time.</param>
            <param name="clock">The clock to use to measure processing duration.</param>
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.#ctor(App.Metrics.Abstractions.MetricTypes.IHistogramMetric,App.Metrics.Abstractions.MetricTypes.IMeterMetric,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Timer.DefaultTimerMetric" /> class.
            </summary>
            <param name="histogram">The histogram implementation to use.</param>
            <param name="meter">The meter implementation to use to genreate the rate of events over time.</param>
            <param name="clock">The clock to use to measure processing duration.</param>
        </member>
        <member name="P:App.Metrics.Timer.DefaultTimerMetric.Value">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.CurrentTime">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Dispose">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.EndRecording">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.GetValue(System.Boolean)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.NewContext(System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.NewContext">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Record(System.Int64,App.Metrics.TimeUnit,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Record(System.Int64,App.Metrics.TimeUnit)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Reset">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.StartRecording">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Time(System.Action,System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Time``1(System.Func{``0},System.String)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Time(System.Action)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetric.Time``1(System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetricProvider.#ctor(App.Metrics.Timer.Abstractions.IBuildTimerMetrics,App.Metrics.Registry.Abstractions.IMetricsRegistry,App.Metrics.IClock)">
            <summary>
                Initializes a new instance of the <see cref="T:App.Metrics.Timer.DefaultTimerMetricProvider" /> class.
            </summary>
            <param name="timerBuilder">The timer builder.</param>
            <param name="registry">The metrics registry.</param>
            <param name="clock">The clock.</param>
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetricProvider.Instance(App.Metrics.Core.Options.TimerOptions)">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetricProvider.Instance``1(App.Metrics.Core.Options.TimerOptions,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="M:App.Metrics.Timer.DefaultTimerMetricProvider.WithHistogram``1(App.Metrics.Core.Options.TimerOptions,System.Func{``0})">
            <inheritdoc />
        </member>
        <member name="T:App.Metrics.Timer.TimerContext">
            <summary>
                This struct is meant to be returned by the timer.NewContext() method and is intended to be used inside a using
                statement:
                <code>
            using(timer.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
                <remarks>
                    Double disposing the instance, or a copy of the instance (since it is a struct) will cause the timer to record
                    wrong values.
                    Stick to directly passing it to the using() statement.
                </remarks>
            </summary>
        </member>
        <member name="P:App.Metrics.Timer.TimerContext.Elapsed">
            <summary>
                Gets the currently elapsed time from when the instance has been created
            </summary>
            <value>
                The elapsed.
            </value>
        </member>
        <member name="M:App.Metrics.Timer.TimerContext.TrackUserValue(System.String)">
            <summary>
                Set the user value for this timer context.
            </summary>
            <param name="value">New user value to use for this context.</param>
        </member>
        <member name="T:App.Metrics.Timer.TimerValue">
            <summary>
                The value reported by a Timer Metric
            </summary>
        </member>
        <member name="T:App.Metrics.Timer.TimerValueSource">
            <summary>
                Combines the value of the timer with the defined unit and the time units for rate and duration.
            </summary>
        </member>
        <member name="T:App.Metrics.Timer.Abstractions.IMeasureTimerMetrics">
            <summary>
                Provides access to the API allowing Timer Metrics to be measured/recorded.
            </summary>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.IMeasureTimerMetrics.Time(App.Metrics.Core.Options.TimerOptions,System.Action)">
            <summary>
                Records a <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="action">The action to measure.</param>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.IMeasureTimerMetrics.Time(App.Metrics.Core.Options.TimerOptions,System.Action,System.String)">
            <summary>
                Records a <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="action">The action to measure.</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.IMeasureTimerMetrics.Time(App.Metrics.Core.Options.TimerOptions,System.String)">
            <summary>
                Records a <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <param name="userValue">The user value to track where a Min, Max and Last duration is recorded.</param>
            <returns>A disposable context, when disposed records the time token to process the using block</returns>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.IMeasureTimerMetrics.Time(App.Metrics.Core.Options.TimerOptions)">
            <summary>
                Records a <see cref="T:App.Metrics.Abstractions.MetricTypes.ITimerMetric" /> which measures the time taken to process an action using a timer metric.
                Records a histogram of the duration of a type of event and a meter of the rate of it's occurance
            </summary>
            <param name="options">The details of the timer that is being measured</param>
            <returns>A disposable context, when disposed records the time token to process the using block</returns>
        </member>
        <member name="T:App.Metrics.Timer.Abstractions.ITimer">
            <summary>
                A timer is basically a histogram of the duration of a type of event and a meter of the rate of its occurrence.
                <seealso cref="T:App.Metrics.Histogram.Abstractions.IHistogram" /> and <seealso cref="T:App.Metrics.Meter.Abstractions.IMeter" />
            </summary>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.CurrentTime">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Returns the current time in nanoseconds for computing elapsed time.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.EndRecording">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually ends timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.NewContext(System.String)">
            <summary>
                Creates a new disposable instance and records the time it takes until the instance is disposed.
                <code>
            using(timer.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.NewContext">
            <summary>
                Creates a new disposable instance and records the time it takes until the instance is disposed.
                <code>
            using(timer.NewContext())
            {
                ExecuteMethodThatNeedsMonitoring();
            }
            </code>
            </summary>
            <returns>A disposable instance that will record the time passed until disposed.</returns>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.Record(System.Int64,App.Metrics.TimeUnit,System.String)">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually record timer value.
            </summary>
            <param name="time">The value representing the manually measured time.</param>
            <param name="unit">Unit for the value.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.Record(System.Int64,App.Metrics.TimeUnit)">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually record timer value.
            </summary>
            <param name="time">The value representing the manually measured time.</param>
            <param name="unit">Unit for the value.</param>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.StartRecording">
            <summary>
                This is part of advanced timer API. Use Timer.NewContext() by default.
                Manually start timing an action.
            </summary>
            <returns>value representing the current time in nanoseconds.</returns>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.Time(System.Action,System.String)">
            <summary>
                Runs the <paramref name="action" /> and records the time it took.
            </summary>
            <param name="action">Action to run and record time for.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.Time(System.Action)">
            <summary>
                Runs the <paramref name="action" /> and records the time it took.
            </summary>
            <param name="action">Action to run and record time for.</param>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.Time``1(System.Func{``0},System.String)">
            <summary>
                Runs the <paramref name="action" /> returning the result and records the time it took.
            </summary>
            <typeparam name="T">Type of the value returned by the action</typeparam>
            <param name="action">Action to run and record time for.</param>
            <param name="userValue">
                A custom user value that will be associated to the results.
                Useful for tracking (for example) for which id the max or min value was recorded.
            </param>
            <returns>The result of the <paramref name="action" /></returns>
        </member>
        <member name="M:App.Metrics.Timer.Abstractions.ITimer.Time``1(System.Func{``0})">
            <summary>
                Runs the <paramref name="action" /> returning the result and records the time it took.
            </summary>
            <typeparam name="T">Type of the value returned by the action</typeparam>
            <param name="action">Action to run and record time for.</param>
            <returns>The result of the <paramref name="action" /></returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsServiceCollectionExtensions.AddMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the metrics services and configuration to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see>.
            </summary>
            <param name="services">The application services collection.</param>
            <returns>The metrics host builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsServiceCollectionExtensions.AddMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Adds the metrics services and configuration to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see>.
            </summary>
            <param name="services">The application services collection.</param>
            <param name="configuration">
                The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration">IConfiguration</see> from where to load <see cref="T:App.Metrics.Configuration.AppMetricsOptions">options</see>.
            </param>
            <returns>The metrics host builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsServiceCollectionExtensions.AddMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{App.Metrics.Configuration.AppMetricsOptions},Microsoft.Extensions.Configuration.IConfiguration)">
            <summary>
                Adds the metrics services and configuration to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see>.
            </summary>
            <param name="services">The application services collection.</param>
            <param name="setupAction">The <see cref="T:App.Metrics.Configuration.AppMetricsOptions">options</see> setup action.</param>
            <param name="configuration">
                The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration">IConfiguration</see> from where to load
                <see cref="T:App.Metrics.Configuration.AppMetricsOptions">options</see>. Any shared configuration options with the options delegate will be
                overriden by using this configuration.
            </param>
            <returns>The metrics host builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsServiceCollectionExtensions.AddMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection,Microsoft.Extensions.Configuration.IConfiguration,System.Action{App.Metrics.Configuration.AppMetricsOptions})">
            <summary>
                Adds the metrics services and configuration to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see>.
            </summary>
            <param name="services">The application services collection.</param>
            <param name="configuration">
                The <see cref="T:Microsoft.Extensions.Configuration.IConfiguration">IConfiguration</see> from where to load
                <see cref="T:App.Metrics.Configuration.AppMetricsOptions">options</see>.
            </param>
            <param name="setupAction">The <see cref="T:App.Metrics.Configuration.AppMetricsOptions">options</see> setup action.</param>
            Any shared configuration options with the options IConfiguration will be overriden by the options delegate.
            <returns>The metrics host builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsServiceCollectionExtensions.AddMetrics(Microsoft.Extensions.DependencyInjection.IServiceCollection,System.Action{App.Metrics.Configuration.AppMetricsOptions})">
            <summary>
                Adds the metrics services and configuration to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see>.
            </summary>
            <param name="services">The application services collection.</param>
            <param name="setupAction">The <see cref="T:App.Metrics.Configuration.AppMetricsOptions">options</see> setup action.</param>
            <returns>The metrics host builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsServiceCollectionExtensions.AddMetricsHostBuilder(Microsoft.Extensions.DependencyInjection.IServiceCollection)">
            <summary>
                Adds the metrics services and configuration to the <see cref="T:Microsoft.Extensions.DependencyInjection.IServiceCollection">IServiceCollection</see>.
            </summary>
            <param name="services">The application services collection.</param>
            <returns>The metrics host builder</returns>
        </member>
        <member name="M:Microsoft.Extensions.DependencyInjection.MetricsHostBuilderExtensionsOptional.AddDefaultReservoir(Microsoft.Extensions.DependencyInjection.IMetricsHostBuilder,System.Func{System.Lazy{App.Metrics.Abstractions.ReservoirSampling.IReservoir}})">
            <summary>
                Adds the default reservoir which will be applied to all metrics using sampling that do not have an
                <see cref="T:App.Metrics.Abstractions.ReservoirSampling.IReservoir" /> set explicitly.
            </summary>
            <param name="builder">The metrics host builder.</param>
            <param name="reservoirBuilder">The reservoir builder to use as the default reservoir for sampling.</param>
            <returns>The same instance of the metrics host builder.</returns>
        </member>
    </members>
</doc>
